// Code generated by protoc-gen-mcp-go. DO NOT EDIT.
// source: runme/project/v1/project.proto

package projectv1mcp

import (
	_ "github.com/runmedev/runme/v3/api/gen/proto/go/runme/project/v1"
)

import (
	"context"
	"github.com/mark3labs/mcp-go/mcp"
	mcpserver "github.com/mark3labs/mcp-go/server"
	"encoding/json"
	"google.golang.org/protobuf/encoding/protojson"
	"connectrpc.com/connect"
	grpc "google.golang.org/grpc"
	"github.com/redpanda-data/protoc-gen-go-mcp/pkg/runtime"
)

var ()

// ProjectServiceServer is compatible with the grpc-go server interface.
type ProjectServiceServer interface {
}

// RegisterProjectServiceHandler registers standard MCP handlers for ProjectService
func RegisterProjectServiceHandler(s *mcpserver.MCPServer, srv ProjectServiceServer, opts ...runtime.Option) {
	config := runtime.NewConfig()
	for _, opt := range opts {
		opt(config)
	}
}

// RegisterProjectServiceHandlerOpenAI registers OpenAI-compatible MCP handlers for ProjectService
func RegisterProjectServiceHandlerOpenAI(s *mcpserver.MCPServer, srv ProjectServiceServer, opts ...runtime.Option) {
	config := runtime.NewConfig()
	for _, opt := range opts {
		opt(config)
	}
}

// RegisterProjectServiceHandlerWithProvider registers handlers for the specified LLM provider
func RegisterProjectServiceHandlerWithProvider(s *mcpserver.MCPServer, srv ProjectServiceServer, provider runtime.LLMProvider, opts ...runtime.Option) {
	switch provider {
	case runtime.LLMProviderOpenAI:
		RegisterProjectServiceHandlerOpenAI(s, srv, opts...)
	case runtime.LLMProviderStandard:
		fallthrough
	default:
		RegisterProjectServiceHandler(s, srv, opts...)
	}
}

// ProjectServiceClient is compatible with the grpc-go client interface.
type ProjectServiceClient interface {
}

// ConnectProjectServiceClient is compatible with the connectrpc-go client interface.
type ConnectProjectServiceClient interface {
}

// ForwardToConnectProjectServiceClient registers a connectrpc client, to forward MCP calls to it.
func ForwardToConnectProjectServiceClient(s *mcpserver.MCPServer, client ConnectProjectServiceClient, opts ...runtime.Option) {
	config := runtime.NewConfig()
	for _, opt := range opts {
		opt(config)
	}
}

// ForwardToProjectServiceClient registers a gRPC client, to forward MCP calls to it.
func ForwardToProjectServiceClient(s *mcpserver.MCPServer, client ProjectServiceClient, opts ...runtime.Option) {
	config := runtime.NewConfig()
	for _, opt := range opts {
		opt(config)
	}
}
