{
  "$id": "runme.runner.v2.ProgramConfig.jsonschema.json",
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "additionalProperties": false,
  "description": "ProgramConfig is a configuration for a program to execute.\n From this configuration, any program can be built.",
  "patternProperties": {
    "^(file_extension)$": {
      "default": "",
      "description": "file_extension associated with script. Some interpreters are strict\n about file extensions, such as tsc which requires \"ts\" extension.",
      "type": "string"
    },
    "^(known_id)$": {
      "default": "",
      "description": "optional well known id for cell/block",
      "type": "string"
    },
    "^(known_name)$": {
      "default": "",
      "description": "optional well known name for cell/block",
      "type": "string"
    },
    "^(language_id)$": {
      "default": "",
      "description": "language_id associated with script to allow interpreter\n detection if no specific interpreter program is provided.",
      "type": "string"
    },
    "^(program_name)$": {
      "default": "",
      "description": "program_name is a name of the program to execute.\n If it's not a path (relative or absolute), the runner\n will try to resolve the name.\n For example: \"sh\", \"/bin/bash\".",
      "type": "string"
    },
    "^(run_id)$": {
      "default": "",
      "description": "optional run ID to track the execution of the program",
      "type": "string"
    }
  },
  "properties": {
    "arguments": {
      "description": "arguments is a list of arguments passed to the program.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "background": {
      "default": false,
      "description": "background indicates a background process\n required to handle running background tasks via CLI in C/I",
      "type": "boolean"
    },
    "commands": {
      "$ref": "runme.runner.v2.ProgramConfig.CommandList.jsonschema.json",
      "description": "commands are commands to be executed by the program.\n The commands are joined and executed as a script."
    },
    "directory": {
      "default": "",
      "description": "directory to execute the program in.",
      "type": "string"
    },
    "env": {
      "description": "env is a list of additional environment variables\n that will be injected to the executed program.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "fileExtension": {
      "default": "",
      "description": "file_extension associated with script. Some interpreters are strict\n about file extensions, such as tsc which requires \"ts\" extension.",
      "type": "string"
    },
    "interactive": {
      "default": false,
      "description": "interactive, if true, uses a pseudo-tty to execute the program.\n Otherwise, the program is executed using in-memory buffers for I/O.",
      "type": "boolean"
    },
    "knownId": {
      "default": "",
      "description": "optional well known id for cell/block",
      "type": "string"
    },
    "knownName": {
      "default": "",
      "description": "optional well known name for cell/block",
      "type": "string"
    },
    "languageId": {
      "default": "",
      "description": "language_id associated with script to allow interpreter\n detection if no specific interpreter program is provided.",
      "type": "string"
    },
    "mode": {
      "anyOf": [
        {
          "pattern": "^COMMAND_MODE_UNSPECIFIED$",
          "type": "string"
        },
        {
          "enum": [
            "COMMAND_MODE_INLINE",
            "COMMAND_MODE_FILE",
            "COMMAND_MODE_TERMINAL",
            "COMMAND_MODE_CLI"
          ],
          "type": "string"
        },
        {
          "maximum": 2147483647,
          "minimum": -2147483648,
          "type": "integer"
        }
      ],
      "default": 0,
      "description": "TODO(adamb): understand motivation for this. In theory, source\n should tell whether to execute it inline or as a file.",
      "title": "Command Mode"
    },
    "programName": {
      "default": "",
      "description": "program_name is a name of the program to execute.\n If it's not a path (relative or absolute), the runner\n will try to resolve the name.\n For example: \"sh\", \"/bin/bash\".",
      "type": "string"
    },
    "runId": {
      "default": "",
      "description": "optional run ID to track the execution of the program",
      "type": "string"
    },
    "script": {
      "description": "script is code to be executed by the program.\n Individual lines are joined with the new line character.",
      "type": "string"
    }
  },
  "title": "Program Config",
  "type": "object"
}
