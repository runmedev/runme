// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: agent/v1/tools.proto

package agentv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/runmedev/runme/v3/api/gen/proto/go/agent/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// NotebookServiceName is the fully-qualified name of the NotebookService service.
	NotebookServiceName = "agent.v1.NotebookService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NotebookServiceUpdateCellProcedure is the fully-qualified name of the NotebookService's
	// UpdateCell RPC.
	NotebookServiceUpdateCellProcedure = "/agent.v1.NotebookService/UpdateCell"
	// NotebookServiceGetCellsProcedure is the fully-qualified name of the NotebookService's GetCells
	// RPC.
	NotebookServiceGetCellsProcedure = "/agent.v1.NotebookService/GetCells"
	// NotebookServiceListCellsProcedure is the fully-qualified name of the NotebookService's ListCells
	// RPC.
	NotebookServiceListCellsProcedure = "/agent.v1.NotebookService/ListCells"
)

// NotebookServiceClient is a client for the agent.v1.NotebookService service.
type NotebookServiceClient interface {
	// UpdateCell updates a cell in the document.
	// Cell is the cell to create or update. To update
	// an existing cell specify the ID of that cell in the ref_id field.
	// To create a new cell leave ref_id blank.
	//
	// You can use cell.metadata["agent/summary"] to include a short summary or description of the cell.
	// You should set the description so that its useful for deciding what cells you should read to answer the user's
	// queries.
	UpdateCell(context.Context, *connect.Request[v1.UpdateCellRequest]) (*connect.Response[v1.UpdateCellResponse], error)
	// GetCells fetches the cells with the given ref_ids.
	// Use this to read the contents of cells in the notebook.
	GetCells(context.Context, *connect.Request[v1.GetCellRequest]) (*connect.Response[v1.GetCellResponse], error)
	// ListCells lists the cells in a notebook.
	// Important: Only the ref_id and metadata will be populated. You should use that to decide
	// which cells to read.
	ListCells(context.Context, *connect.Request[v1.ListCellsRequest]) (*connect.Response[v1.ListCellResponses], error)
}

// NewNotebookServiceClient constructs a client for the agent.v1.NotebookService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNotebookServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NotebookServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	notebookServiceMethods := v1.File_agent_v1_tools_proto.Services().ByName("NotebookService").Methods()
	return &notebookServiceClient{
		updateCell: connect.NewClient[v1.UpdateCellRequest, v1.UpdateCellResponse](
			httpClient,
			baseURL+NotebookServiceUpdateCellProcedure,
			connect.WithSchema(notebookServiceMethods.ByName("UpdateCell")),
			connect.WithClientOptions(opts...),
		),
		getCells: connect.NewClient[v1.GetCellRequest, v1.GetCellResponse](
			httpClient,
			baseURL+NotebookServiceGetCellsProcedure,
			connect.WithSchema(notebookServiceMethods.ByName("GetCells")),
			connect.WithClientOptions(opts...),
		),
		listCells: connect.NewClient[v1.ListCellsRequest, v1.ListCellResponses](
			httpClient,
			baseURL+NotebookServiceListCellsProcedure,
			connect.WithSchema(notebookServiceMethods.ByName("ListCells")),
			connect.WithClientOptions(opts...),
		),
	}
}

// notebookServiceClient implements NotebookServiceClient.
type notebookServiceClient struct {
	updateCell *connect.Client[v1.UpdateCellRequest, v1.UpdateCellResponse]
	getCells   *connect.Client[v1.GetCellRequest, v1.GetCellResponse]
	listCells  *connect.Client[v1.ListCellsRequest, v1.ListCellResponses]
}

// UpdateCell calls agent.v1.NotebookService.UpdateCell.
func (c *notebookServiceClient) UpdateCell(ctx context.Context, req *connect.Request[v1.UpdateCellRequest]) (*connect.Response[v1.UpdateCellResponse], error) {
	return c.updateCell.CallUnary(ctx, req)
}

// GetCells calls agent.v1.NotebookService.GetCells.
func (c *notebookServiceClient) GetCells(ctx context.Context, req *connect.Request[v1.GetCellRequest]) (*connect.Response[v1.GetCellResponse], error) {
	return c.getCells.CallUnary(ctx, req)
}

// ListCells calls agent.v1.NotebookService.ListCells.
func (c *notebookServiceClient) ListCells(ctx context.Context, req *connect.Request[v1.ListCellsRequest]) (*connect.Response[v1.ListCellResponses], error) {
	return c.listCells.CallUnary(ctx, req)
}

// NotebookServiceHandler is an implementation of the agent.v1.NotebookService service.
type NotebookServiceHandler interface {
	// UpdateCell updates a cell in the document.
	// Cell is the cell to create or update. To update
	// an existing cell specify the ID of that cell in the ref_id field.
	// To create a new cell leave ref_id blank.
	//
	// You can use cell.metadata["agent/summary"] to include a short summary or description of the cell.
	// You should set the description so that its useful for deciding what cells you should read to answer the user's
	// queries.
	UpdateCell(context.Context, *connect.Request[v1.UpdateCellRequest]) (*connect.Response[v1.UpdateCellResponse], error)
	// GetCells fetches the cells with the given ref_ids.
	// Use this to read the contents of cells in the notebook.
	GetCells(context.Context, *connect.Request[v1.GetCellRequest]) (*connect.Response[v1.GetCellResponse], error)
	// ListCells lists the cells in a notebook.
	// Important: Only the ref_id and metadata will be populated. You should use that to decide
	// which cells to read.
	ListCells(context.Context, *connect.Request[v1.ListCellsRequest]) (*connect.Response[v1.ListCellResponses], error)
}

// NewNotebookServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNotebookServiceHandler(svc NotebookServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	notebookServiceMethods := v1.File_agent_v1_tools_proto.Services().ByName("NotebookService").Methods()
	notebookServiceUpdateCellHandler := connect.NewUnaryHandler(
		NotebookServiceUpdateCellProcedure,
		svc.UpdateCell,
		connect.WithSchema(notebookServiceMethods.ByName("UpdateCell")),
		connect.WithHandlerOptions(opts...),
	)
	notebookServiceGetCellsHandler := connect.NewUnaryHandler(
		NotebookServiceGetCellsProcedure,
		svc.GetCells,
		connect.WithSchema(notebookServiceMethods.ByName("GetCells")),
		connect.WithHandlerOptions(opts...),
	)
	notebookServiceListCellsHandler := connect.NewUnaryHandler(
		NotebookServiceListCellsProcedure,
		svc.ListCells,
		connect.WithSchema(notebookServiceMethods.ByName("ListCells")),
		connect.WithHandlerOptions(opts...),
	)
	return "/agent.v1.NotebookService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NotebookServiceUpdateCellProcedure:
			notebookServiceUpdateCellHandler.ServeHTTP(w, r)
		case NotebookServiceGetCellsProcedure:
			notebookServiceGetCellsHandler.ServeHTTP(w, r)
		case NotebookServiceListCellsProcedure:
			notebookServiceListCellsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNotebookServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNotebookServiceHandler struct{}

func (UnimplementedNotebookServiceHandler) UpdateCell(context.Context, *connect.Request[v1.UpdateCellRequest]) (*connect.Response[v1.UpdateCellResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("agent.v1.NotebookService.UpdateCell is not implemented"))
}

func (UnimplementedNotebookServiceHandler) GetCells(context.Context, *connect.Request[v1.GetCellRequest]) (*connect.Response[v1.GetCellResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("agent.v1.NotebookService.GetCells is not implemented"))
}

func (UnimplementedNotebookServiceHandler) ListCells(context.Context, *connect.Request[v1.ListCellsRequest]) (*connect.Response[v1.ListCellResponses], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("agent.v1.NotebookService.ListCells is not implemented"))
}
