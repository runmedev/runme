// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: agent/v1/blocks.proto

package agentv1connect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect "connectrpc.com/connect"

	v1 "github.com/runmedev/runme/v3/api/gen/proto/go/agent/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BlocksServiceName is the fully-qualified name of the BlocksService service.
	BlocksServiceName = "agent.v1.BlocksService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BlocksServiceGenerateProcedure is the fully-qualified name of the BlocksService's Generate RPC.
	BlocksServiceGenerateProcedure = "/agent.v1.BlocksService/Generate"
)

// BlocksServiceClient is a client for the agent.v1.BlocksService service.
type BlocksServiceClient interface {
	// Generate generates blocks. Responses are streamed.
	Generate(context.Context, *connect.Request[v1.GenerateRequest]) (*connect.ServerStreamForClient[v1.GenerateResponse], error)
}

// NewBlocksServiceClient constructs a client for the agent.v1.BlocksService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBlocksServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BlocksServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	blocksServiceMethods := v1.File_agent_v1_blocks_proto.Services().ByName("BlocksService").Methods()
	return &blocksServiceClient{
		generate: connect.NewClient[v1.GenerateRequest, v1.GenerateResponse](
			httpClient,
			baseURL+BlocksServiceGenerateProcedure,
			connect.WithSchema(blocksServiceMethods.ByName("Generate")),
			connect.WithClientOptions(opts...),
		),
	}
}

// blocksServiceClient implements BlocksServiceClient.
type blocksServiceClient struct {
	generate *connect.Client[v1.GenerateRequest, v1.GenerateResponse]
}

// Generate calls agent.v1.BlocksService.Generate.
func (c *blocksServiceClient) Generate(ctx context.Context, req *connect.Request[v1.GenerateRequest]) (*connect.ServerStreamForClient[v1.GenerateResponse], error) {
	return c.generate.CallServerStream(ctx, req)
}

// BlocksServiceHandler is an implementation of the agent.v1.BlocksService service.
type BlocksServiceHandler interface {
	// Generate generates blocks. Responses are streamed.
	Generate(context.Context, *connect.Request[v1.GenerateRequest], *connect.ServerStream[v1.GenerateResponse]) error
}

// NewBlocksServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBlocksServiceHandler(svc BlocksServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	blocksServiceMethods := v1.File_agent_v1_blocks_proto.Services().ByName("BlocksService").Methods()
	blocksServiceGenerateHandler := connect.NewServerStreamHandler(
		BlocksServiceGenerateProcedure,
		svc.Generate,
		connect.WithSchema(blocksServiceMethods.ByName("Generate")),
		connect.WithHandlerOptions(opts...),
	)
	return "/agent.v1.BlocksService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BlocksServiceGenerateProcedure:
			blocksServiceGenerateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBlocksServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBlocksServiceHandler struct{}

func (UnimplementedBlocksServiceHandler) Generate(context.Context, *connect.Request[v1.GenerateRequest], *connect.ServerStream[v1.GenerateResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("agent.v1.BlocksService.Generate is not implemented"))
}
