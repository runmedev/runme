// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: agent/v1/tools.proto

package agentv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NotebookService_UpdateCell_FullMethodName = "/agent.v1.NotebookService/UpdateCell"
	NotebookService_GetCells_FullMethodName   = "/agent.v1.NotebookService/GetCells"
	NotebookService_ListCells_FullMethodName  = "/agent.v1.NotebookService/ListCells"
)

// NotebookServiceClient is the client API for NotebookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// NotebookService defines methods the AI can use to interact with the notebook.
// This is used to generate JSON schemas that can be used to define tool calls (or potentially) MCP server.
// Using https://github.com/redpanda-data/protoc-gen-go-mcp.
//
// It looks like only comments on the method get translated into the description.
type NotebookServiceClient interface {
	// UpdateCell updates a cell in the document.
	// Cell is the cell to create or update. To update
	// an existing cell specify the ID of that cell in the ref_id field.
	// To create a new cell leave ref_id blank.
	//
	// You can use cell.metadata["agent/summary"] to include a short summary or description of the cell.
	// You should set the description so that its useful for deciding what cells you should read to answer the user's
	// queries.
	UpdateCell(ctx context.Context, in *UpdateCellRequest, opts ...grpc.CallOption) (*UpdateCellResponse, error)
	// GetCells fetches the cells with the given ref_ids.
	// Use this to read the contents of cells in the notebook.
	GetCells(ctx context.Context, in *GetCellRequest, opts ...grpc.CallOption) (*GetCellResponse, error)
	// ListCells lists the cells in a notebook.
	// Important: Only the ref_id and metadata will be populated. You should use that to decide
	// which cells to read.
	ListCells(ctx context.Context, in *ListCellsRequest, opts ...grpc.CallOption) (*ListCellResponses, error)
}

type notebookServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotebookServiceClient(cc grpc.ClientConnInterface) NotebookServiceClient {
	return &notebookServiceClient{cc}
}

func (c *notebookServiceClient) UpdateCell(ctx context.Context, in *UpdateCellRequest, opts ...grpc.CallOption) (*UpdateCellResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCellResponse)
	err := c.cc.Invoke(ctx, NotebookService_UpdateCell_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notebookServiceClient) GetCells(ctx context.Context, in *GetCellRequest, opts ...grpc.CallOption) (*GetCellResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCellResponse)
	err := c.cc.Invoke(ctx, NotebookService_GetCells_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notebookServiceClient) ListCells(ctx context.Context, in *ListCellsRequest, opts ...grpc.CallOption) (*ListCellResponses, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCellResponses)
	err := c.cc.Invoke(ctx, NotebookService_ListCells_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotebookServiceServer is the server API for NotebookService service.
// All implementations must embed UnimplementedNotebookServiceServer
// for forward compatibility.
//
// NotebookService defines methods the AI can use to interact with the notebook.
// This is used to generate JSON schemas that can be used to define tool calls (or potentially) MCP server.
// Using https://github.com/redpanda-data/protoc-gen-go-mcp.
//
// It looks like only comments on the method get translated into the description.
type NotebookServiceServer interface {
	// UpdateCell updates a cell in the document.
	// Cell is the cell to create or update. To update
	// an existing cell specify the ID of that cell in the ref_id field.
	// To create a new cell leave ref_id blank.
	//
	// You can use cell.metadata["agent/summary"] to include a short summary or description of the cell.
	// You should set the description so that its useful for deciding what cells you should read to answer the user's
	// queries.
	UpdateCell(context.Context, *UpdateCellRequest) (*UpdateCellResponse, error)
	// GetCells fetches the cells with the given ref_ids.
	// Use this to read the contents of cells in the notebook.
	GetCells(context.Context, *GetCellRequest) (*GetCellResponse, error)
	// ListCells lists the cells in a notebook.
	// Important: Only the ref_id and metadata will be populated. You should use that to decide
	// which cells to read.
	ListCells(context.Context, *ListCellsRequest) (*ListCellResponses, error)
	mustEmbedUnimplementedNotebookServiceServer()
}

// UnimplementedNotebookServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNotebookServiceServer struct{}

func (UnimplementedNotebookServiceServer) UpdateCell(context.Context, *UpdateCellRequest) (*UpdateCellResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCell not implemented")
}
func (UnimplementedNotebookServiceServer) GetCells(context.Context, *GetCellRequest) (*GetCellResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCells not implemented")
}
func (UnimplementedNotebookServiceServer) ListCells(context.Context, *ListCellsRequest) (*ListCellResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCells not implemented")
}
func (UnimplementedNotebookServiceServer) mustEmbedUnimplementedNotebookServiceServer() {}
func (UnimplementedNotebookServiceServer) testEmbeddedByValue()                         {}

// UnsafeNotebookServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotebookServiceServer will
// result in compilation errors.
type UnsafeNotebookServiceServer interface {
	mustEmbedUnimplementedNotebookServiceServer()
}

func RegisterNotebookServiceServer(s grpc.ServiceRegistrar, srv NotebookServiceServer) {
	// If the following call pancis, it indicates UnimplementedNotebookServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NotebookService_ServiceDesc, srv)
}

func _NotebookService_UpdateCell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotebookServiceServer).UpdateCell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotebookService_UpdateCell_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotebookServiceServer).UpdateCell(ctx, req.(*UpdateCellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotebookService_GetCells_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotebookServiceServer).GetCells(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotebookService_GetCells_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotebookServiceServer).GetCells(ctx, req.(*GetCellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotebookService_ListCells_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCellsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotebookServiceServer).ListCells(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotebookService_ListCells_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotebookServiceServer).ListCells(ctx, req.(*ListCellsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotebookService_ServiceDesc is the grpc.ServiceDesc for NotebookService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotebookService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent.v1.NotebookService",
	HandlerType: (*NotebookServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateCell",
			Handler:    _NotebookService_UpdateCell_Handler,
		},
		{
			MethodName: "GetCells",
			Handler:    _NotebookService_GetCells_Handler,
		},
		{
			MethodName: "ListCells",
			Handler:    _NotebookService_ListCells_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agent/v1/tools.proto",
}
