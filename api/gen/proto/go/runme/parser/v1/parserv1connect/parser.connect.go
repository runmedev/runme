// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: runme/parser/v1/parser.proto

package parserv1connect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect "connectrpc.com/connect"

	v1 "github.com/runmedev/runme/v3/api/gen/proto/go/runme/parser/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ParserServiceName is the fully-qualified name of the ParserService service.
	ParserServiceName = "runme.parser.v1.ParserService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ParserServiceDeserializeProcedure is the fully-qualified name of the ParserService's Deserialize
	// RPC.
	ParserServiceDeserializeProcedure = "/runme.parser.v1.ParserService/Deserialize"
	// ParserServiceSerializeProcedure is the fully-qualified name of the ParserService's Serialize RPC.
	ParserServiceSerializeProcedure = "/runme.parser.v1.ParserService/Serialize"
)

// ParserServiceClient is a client for the runme.parser.v1.ParserService service.
type ParserServiceClient interface {
	Deserialize(context.Context, *connect.Request[v1.DeserializeRequest]) (*connect.Response[v1.DeserializeResponse], error)
	Serialize(context.Context, *connect.Request[v1.SerializeRequest]) (*connect.Response[v1.SerializeResponse], error)
}

// NewParserServiceClient constructs a client for the runme.parser.v1.ParserService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewParserServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ParserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	parserServiceMethods := v1.File_runme_parser_v1_parser_proto.Services().ByName("ParserService").Methods()
	return &parserServiceClient{
		deserialize: connect.NewClient[v1.DeserializeRequest, v1.DeserializeResponse](
			httpClient,
			baseURL+ParserServiceDeserializeProcedure,
			connect.WithSchema(parserServiceMethods.ByName("Deserialize")),
			connect.WithClientOptions(opts...),
		),
		serialize: connect.NewClient[v1.SerializeRequest, v1.SerializeResponse](
			httpClient,
			baseURL+ParserServiceSerializeProcedure,
			connect.WithSchema(parserServiceMethods.ByName("Serialize")),
			connect.WithClientOptions(opts...),
		),
	}
}

// parserServiceClient implements ParserServiceClient.
type parserServiceClient struct {
	deserialize *connect.Client[v1.DeserializeRequest, v1.DeserializeResponse]
	serialize   *connect.Client[v1.SerializeRequest, v1.SerializeResponse]
}

// Deserialize calls runme.parser.v1.ParserService.Deserialize.
func (c *parserServiceClient) Deserialize(ctx context.Context, req *connect.Request[v1.DeserializeRequest]) (*connect.Response[v1.DeserializeResponse], error) {
	return c.deserialize.CallUnary(ctx, req)
}

// Serialize calls runme.parser.v1.ParserService.Serialize.
func (c *parserServiceClient) Serialize(ctx context.Context, req *connect.Request[v1.SerializeRequest]) (*connect.Response[v1.SerializeResponse], error) {
	return c.serialize.CallUnary(ctx, req)
}

// ParserServiceHandler is an implementation of the runme.parser.v1.ParserService service.
type ParserServiceHandler interface {
	Deserialize(context.Context, *connect.Request[v1.DeserializeRequest]) (*connect.Response[v1.DeserializeResponse], error)
	Serialize(context.Context, *connect.Request[v1.SerializeRequest]) (*connect.Response[v1.SerializeResponse], error)
}

// NewParserServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewParserServiceHandler(svc ParserServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	parserServiceMethods := v1.File_runme_parser_v1_parser_proto.Services().ByName("ParserService").Methods()
	parserServiceDeserializeHandler := connect.NewUnaryHandler(
		ParserServiceDeserializeProcedure,
		svc.Deserialize,
		connect.WithSchema(parserServiceMethods.ByName("Deserialize")),
		connect.WithHandlerOptions(opts...),
	)
	parserServiceSerializeHandler := connect.NewUnaryHandler(
		ParserServiceSerializeProcedure,
		svc.Serialize,
		connect.WithSchema(parserServiceMethods.ByName("Serialize")),
		connect.WithHandlerOptions(opts...),
	)
	return "/runme.parser.v1.ParserService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ParserServiceDeserializeProcedure:
			parserServiceDeserializeHandler.ServeHTTP(w, r)
		case ParserServiceSerializeProcedure:
			parserServiceSerializeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedParserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedParserServiceHandler struct{}

func (UnimplementedParserServiceHandler) Deserialize(context.Context, *connect.Request[v1.DeserializeRequest]) (*connect.Response[v1.DeserializeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("runme.parser.v1.ParserService.Deserialize is not implemented"))
}

func (UnimplementedParserServiceHandler) Serialize(context.Context, *connect.Request[v1.SerializeRequest]) (*connect.Response[v1.SerializeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("runme.parser.v1.ParserService.Serialize is not implemented"))
}
