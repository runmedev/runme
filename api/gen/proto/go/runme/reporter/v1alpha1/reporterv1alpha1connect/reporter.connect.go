// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: runme/reporter/v1alpha1/reporter.proto

package reporterv1alpha1connect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect "connectrpc.com/connect"

	v1alpha1 "github.com/runmedev/runme/v3/api/gen/proto/go/runme/reporter/v1alpha1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ReporterServiceName is the fully-qualified name of the ReporterService service.
	ReporterServiceName = "runme.reporter.v1alpha1.ReporterService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ReporterServiceTransformProcedure is the fully-qualified name of the ReporterService's Transform
	// RPC.
	ReporterServiceTransformProcedure = "/runme.reporter.v1alpha1.ReporterService/Transform"
)

// ReporterServiceClient is a client for the runme.reporter.v1alpha1.ReporterService service.
type ReporterServiceClient interface {
	Transform(context.Context, *connect.Request[v1alpha1.TransformRequest]) (*connect.Response[v1alpha1.TransformResponse], error)
}

// NewReporterServiceClient constructs a client for the runme.reporter.v1alpha1.ReporterService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewReporterServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ReporterServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	reporterServiceMethods := v1alpha1.File_runme_reporter_v1alpha1_reporter_proto.Services().ByName("ReporterService").Methods()
	return &reporterServiceClient{
		transform: connect.NewClient[v1alpha1.TransformRequest, v1alpha1.TransformResponse](
			httpClient,
			baseURL+ReporterServiceTransformProcedure,
			connect.WithSchema(reporterServiceMethods.ByName("Transform")),
			connect.WithClientOptions(opts...),
		),
	}
}

// reporterServiceClient implements ReporterServiceClient.
type reporterServiceClient struct {
	transform *connect.Client[v1alpha1.TransformRequest, v1alpha1.TransformResponse]
}

// Transform calls runme.reporter.v1alpha1.ReporterService.Transform.
func (c *reporterServiceClient) Transform(ctx context.Context, req *connect.Request[v1alpha1.TransformRequest]) (*connect.Response[v1alpha1.TransformResponse], error) {
	return c.transform.CallUnary(ctx, req)
}

// ReporterServiceHandler is an implementation of the runme.reporter.v1alpha1.ReporterService
// service.
type ReporterServiceHandler interface {
	Transform(context.Context, *connect.Request[v1alpha1.TransformRequest]) (*connect.Response[v1alpha1.TransformResponse], error)
}

// NewReporterServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewReporterServiceHandler(svc ReporterServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	reporterServiceMethods := v1alpha1.File_runme_reporter_v1alpha1_reporter_proto.Services().ByName("ReporterService").Methods()
	reporterServiceTransformHandler := connect.NewUnaryHandler(
		ReporterServiceTransformProcedure,
		svc.Transform,
		connect.WithSchema(reporterServiceMethods.ByName("Transform")),
		connect.WithHandlerOptions(opts...),
	)
	return "/runme.reporter.v1alpha1.ReporterService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ReporterServiceTransformProcedure:
			reporterServiceTransformHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedReporterServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedReporterServiceHandler struct{}

func (UnimplementedReporterServiceHandler) Transform(context.Context, *connect.Request[v1alpha1.TransformRequest]) (*connect.Response[v1alpha1.TransformResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("runme.reporter.v1alpha1.ReporterService.Transform is not implemented"))
}
