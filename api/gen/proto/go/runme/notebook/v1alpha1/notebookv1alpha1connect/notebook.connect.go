// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: runme/notebook/v1alpha1/notebook.proto

package notebookv1alpha1connect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect "connectrpc.com/connect"

	v1alpha1 "github.com/runmedev/runme/v3/api/gen/proto/go/runme/notebook/v1alpha1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// NotebookServiceName is the fully-qualified name of the NotebookService service.
	NotebookServiceName = "runme.notebook.v1alpha1.NotebookService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NotebookServiceResolveNotebookProcedure is the fully-qualified name of the NotebookService's
	// ResolveNotebook RPC.
	NotebookServiceResolveNotebookProcedure = "/runme.notebook.v1alpha1.NotebookService/ResolveNotebook"
)

// NotebookServiceClient is a client for the runme.notebook.v1alpha1.NotebookService service.
type NotebookServiceClient interface {
	// ResolveNotebook takes [runme.parser.v1.Notebook] and a cell index and
	// returns a script that runs the cell taking the whole notebook into account.
	ResolveNotebook(context.Context, *connect.Request[v1alpha1.ResolveNotebookRequest]) (*connect.Response[v1alpha1.ResolveNotebookResponse], error)
}

// NewNotebookServiceClient constructs a client for the runme.notebook.v1alpha1.NotebookService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNotebookServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NotebookServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	notebookServiceMethods := v1alpha1.File_runme_notebook_v1alpha1_notebook_proto.Services().ByName("NotebookService").Methods()
	return &notebookServiceClient{
		resolveNotebook: connect.NewClient[v1alpha1.ResolveNotebookRequest, v1alpha1.ResolveNotebookResponse](
			httpClient,
			baseURL+NotebookServiceResolveNotebookProcedure,
			connect.WithSchema(notebookServiceMethods.ByName("ResolveNotebook")),
			connect.WithClientOptions(opts...),
		),
	}
}

// notebookServiceClient implements NotebookServiceClient.
type notebookServiceClient struct {
	resolveNotebook *connect.Client[v1alpha1.ResolveNotebookRequest, v1alpha1.ResolveNotebookResponse]
}

// ResolveNotebook calls runme.notebook.v1alpha1.NotebookService.ResolveNotebook.
func (c *notebookServiceClient) ResolveNotebook(ctx context.Context, req *connect.Request[v1alpha1.ResolveNotebookRequest]) (*connect.Response[v1alpha1.ResolveNotebookResponse], error) {
	return c.resolveNotebook.CallUnary(ctx, req)
}

// NotebookServiceHandler is an implementation of the runme.notebook.v1alpha1.NotebookService
// service.
type NotebookServiceHandler interface {
	// ResolveNotebook takes [runme.parser.v1.Notebook] and a cell index and
	// returns a script that runs the cell taking the whole notebook into account.
	ResolveNotebook(context.Context, *connect.Request[v1alpha1.ResolveNotebookRequest]) (*connect.Response[v1alpha1.ResolveNotebookResponse], error)
}

// NewNotebookServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNotebookServiceHandler(svc NotebookServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	notebookServiceMethods := v1alpha1.File_runme_notebook_v1alpha1_notebook_proto.Services().ByName("NotebookService").Methods()
	notebookServiceResolveNotebookHandler := connect.NewUnaryHandler(
		NotebookServiceResolveNotebookProcedure,
		svc.ResolveNotebook,
		connect.WithSchema(notebookServiceMethods.ByName("ResolveNotebook")),
		connect.WithHandlerOptions(opts...),
	)
	return "/runme.notebook.v1alpha1.NotebookService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NotebookServiceResolveNotebookProcedure:
			notebookServiceResolveNotebookHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNotebookServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNotebookServiceHandler struct{}

func (UnimplementedNotebookServiceHandler) ResolveNotebook(context.Context, *connect.Request[v1alpha1.ResolveNotebookRequest]) (*connect.Response[v1alpha1.ResolveNotebookResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("runme.notebook.v1alpha1.NotebookService.ResolveNotebook is not implemented"))
}
