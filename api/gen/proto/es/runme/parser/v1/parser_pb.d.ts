// @generated by protoc-gen-es v2.6.0 with parameter "target=js+dts,import_extension=none,json_types=true"
// @generated from file runme/parser/v1/parser.proto (package runme.parser.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";
import type { BoolValueJson, Int64ValueJson, UInt32ValueJson } from "@bufbuild/protobuf/wkt";
import type { DocResult, DocResultJson } from "./docresult_pb";

/**
 * Describes the file runme/parser/v1/parser.proto.
 */
export declare const file_runme_parser_v1_parser: GenFile;

/**
 * @generated from message runme.parser.v1.Notebook
 */
export declare type Notebook = Message<"runme.parser.v1.Notebook"> & {
  /**
   * @generated from field: repeated runme.parser.v1.Cell cells = 1;
   */
  cells: Cell[];

  /**
   * @generated from field: map<string, string> metadata = 2;
   */
  metadata: { [key: string]: string };

  /**
   * @generated from field: runme.parser.v1.Frontmatter frontmatter = 3;
   */
  frontmatter?: Frontmatter;
};

/**
 * @generated from message runme.parser.v1.Notebook
 */
export declare type NotebookJson = {
  /**
   * @generated from field: repeated runme.parser.v1.Cell cells = 1;
   */
  cells?: CellJson[];

  /**
   * @generated from field: map<string, string> metadata = 2;
   */
  metadata?: { [key: string]: string };

  /**
   * @generated from field: runme.parser.v1.Frontmatter frontmatter = 3;
   */
  frontmatter?: FrontmatterJson;
};

/**
 * Describes the message runme.parser.v1.Notebook.
 * Use `create(NotebookSchema)` to create a new message.
 */
export declare const NotebookSchema: GenMessage<Notebook, {jsonType: NotebookJson}>;

/**
 * @generated from message runme.parser.v1.ExecutionSummaryTiming
 */
export declare type ExecutionSummaryTiming = Message<"runme.parser.v1.ExecutionSummaryTiming"> & {
  /**
   * @generated from field: google.protobuf.Int64Value start_time = 1;
   */
  startTime?: bigint;

  /**
   * @generated from field: google.protobuf.Int64Value end_time = 2;
   */
  endTime?: bigint;
};

/**
 * @generated from message runme.parser.v1.ExecutionSummaryTiming
 */
export declare type ExecutionSummaryTimingJson = {
  /**
   * @generated from field: google.protobuf.Int64Value start_time = 1;
   */
  startTime?: Int64ValueJson;

  /**
   * @generated from field: google.protobuf.Int64Value end_time = 2;
   */
  endTime?: Int64ValueJson;
};

/**
 * Describes the message runme.parser.v1.ExecutionSummaryTiming.
 * Use `create(ExecutionSummaryTimingSchema)` to create a new message.
 */
export declare const ExecutionSummaryTimingSchema: GenMessage<ExecutionSummaryTiming, {jsonType: ExecutionSummaryTimingJson}>;

/**
 * @generated from message runme.parser.v1.CellOutputItem
 */
export declare type CellOutputItem = Message<"runme.parser.v1.CellOutputItem"> & {
  /**
   * @generated from field: bytes data = 1;
   */
  data: Uint8Array;

  /**
   * @generated from field: string type = 2;
   */
  type: string;

  /**
   * @generated from field: string mime = 3;
   */
  mime: string;
};

/**
 * @generated from message runme.parser.v1.CellOutputItem
 */
export declare type CellOutputItemJson = {
  /**
   * @generated from field: bytes data = 1;
   */
  data?: string;

  /**
   * @generated from field: string type = 2;
   */
  type?: string;

  /**
   * @generated from field: string mime = 3;
   */
  mime?: string;
};

/**
 * Describes the message runme.parser.v1.CellOutputItem.
 * Use `create(CellOutputItemSchema)` to create a new message.
 */
export declare const CellOutputItemSchema: GenMessage<CellOutputItem, {jsonType: CellOutputItemJson}>;

/**
 * @generated from message runme.parser.v1.ProcessInfoExitReason
 */
export declare type ProcessInfoExitReason = Message<"runme.parser.v1.ProcessInfoExitReason"> & {
  /**
   * @generated from field: string type = 1;
   */
  type: string;

  /**
   * @generated from field: google.protobuf.UInt32Value code = 2;
   */
  code?: number;
};

/**
 * @generated from message runme.parser.v1.ProcessInfoExitReason
 */
export declare type ProcessInfoExitReasonJson = {
  /**
   * @generated from field: string type = 1;
   */
  type?: string;

  /**
   * @generated from field: google.protobuf.UInt32Value code = 2;
   */
  code?: UInt32ValueJson;
};

/**
 * Describes the message runme.parser.v1.ProcessInfoExitReason.
 * Use `create(ProcessInfoExitReasonSchema)` to create a new message.
 */
export declare const ProcessInfoExitReasonSchema: GenMessage<ProcessInfoExitReason, {jsonType: ProcessInfoExitReasonJson}>;

/**
 * @generated from message runme.parser.v1.CellOutputProcessInfo
 */
export declare type CellOutputProcessInfo = Message<"runme.parser.v1.CellOutputProcessInfo"> & {
  /**
   * @generated from field: runme.parser.v1.ProcessInfoExitReason exit_reason = 1;
   */
  exitReason?: ProcessInfoExitReason;

  /**
   * @generated from field: google.protobuf.Int64Value pid = 2;
   */
  pid?: bigint;
};

/**
 * @generated from message runme.parser.v1.CellOutputProcessInfo
 */
export declare type CellOutputProcessInfoJson = {
  /**
   * @generated from field: runme.parser.v1.ProcessInfoExitReason exit_reason = 1;
   */
  exitReason?: ProcessInfoExitReasonJson;

  /**
   * @generated from field: google.protobuf.Int64Value pid = 2;
   */
  pid?: Int64ValueJson;
};

/**
 * Describes the message runme.parser.v1.CellOutputProcessInfo.
 * Use `create(CellOutputProcessInfoSchema)` to create a new message.
 */
export declare const CellOutputProcessInfoSchema: GenMessage<CellOutputProcessInfo, {jsonType: CellOutputProcessInfoJson}>;

/**
 * @generated from message runme.parser.v1.CellOutput
 */
export declare type CellOutput = Message<"runme.parser.v1.CellOutput"> & {
  /**
   * @generated from field: repeated runme.parser.v1.CellOutputItem items = 1;
   */
  items: CellOutputItem[];

  /**
   * @generated from field: map<string, string> metadata = 2;
   */
  metadata: { [key: string]: string };

  /**
   * @generated from field: runme.parser.v1.CellOutputProcessInfo process_info = 3;
   */
  processInfo?: CellOutputProcessInfo;
};

/**
 * @generated from message runme.parser.v1.CellOutput
 */
export declare type CellOutputJson = {
  /**
   * @generated from field: repeated runme.parser.v1.CellOutputItem items = 1;
   */
  items?: CellOutputItemJson[];

  /**
   * @generated from field: map<string, string> metadata = 2;
   */
  metadata?: { [key: string]: string };

  /**
   * @generated from field: runme.parser.v1.CellOutputProcessInfo process_info = 3;
   */
  processInfo?: CellOutputProcessInfoJson;
};

/**
 * Describes the message runme.parser.v1.CellOutput.
 * Use `create(CellOutputSchema)` to create a new message.
 */
export declare const CellOutputSchema: GenMessage<CellOutput, {jsonType: CellOutputJson}>;

/**
 * @generated from message runme.parser.v1.CellExecutionSummary
 */
export declare type CellExecutionSummary = Message<"runme.parser.v1.CellExecutionSummary"> & {
  /**
   * @generated from field: google.protobuf.UInt32Value execution_order = 1;
   */
  executionOrder?: number;

  /**
   * @generated from field: google.protobuf.BoolValue success = 2;
   */
  success?: boolean;

  /**
   * @generated from field: runme.parser.v1.ExecutionSummaryTiming timing = 3;
   */
  timing?: ExecutionSummaryTiming;
};

/**
 * @generated from message runme.parser.v1.CellExecutionSummary
 */
export declare type CellExecutionSummaryJson = {
  /**
   * @generated from field: google.protobuf.UInt32Value execution_order = 1;
   */
  executionOrder?: UInt32ValueJson;

  /**
   * @generated from field: google.protobuf.BoolValue success = 2;
   */
  success?: BoolValueJson;

  /**
   * @generated from field: runme.parser.v1.ExecutionSummaryTiming timing = 3;
   */
  timing?: ExecutionSummaryTimingJson;
};

/**
 * Describes the message runme.parser.v1.CellExecutionSummary.
 * Use `create(CellExecutionSummarySchema)` to create a new message.
 */
export declare const CellExecutionSummarySchema: GenMessage<CellExecutionSummary, {jsonType: CellExecutionSummaryJson}>;

/**
 * @generated from message runme.parser.v1.TextRange
 */
export declare type TextRange = Message<"runme.parser.v1.TextRange"> & {
  /**
   * @generated from field: uint32 start = 1;
   */
  start: number;

  /**
   * @generated from field: uint32 end = 2;
   */
  end: number;
};

/**
 * @generated from message runme.parser.v1.TextRange
 */
export declare type TextRangeJson = {
  /**
   * @generated from field: uint32 start = 1;
   */
  start?: number;

  /**
   * @generated from field: uint32 end = 2;
   */
  end?: number;
};

/**
 * Describes the message runme.parser.v1.TextRange.
 * Use `create(TextRangeSchema)` to create a new message.
 */
export declare const TextRangeSchema: GenMessage<TextRange, {jsonType: TextRangeJson}>;

/**
 * @generated from message runme.parser.v1.Cell
 */
export declare type Cell = Message<"runme.parser.v1.Cell"> & {
  /**
   * CellKind is the type of cell, e.g. markup or code.
   *
   * @generated from field: runme.parser.v1.CellKind kind = 1;
   */
  kind: CellKind;

  /**
   * Value is the contents of the cell.
   *
   * @generated from field: string value = 2;
   */
  value: string;

  /**
   * LanguageID is the language of the cell.
   *
   * @generated from field: string language_id = 3;
   */
  languageId: string;

  /**
   * Metadata is additional metadata about the cell in k/v format.
   *
   * @generated from field: map<string, string> metadata = 4;
   */
  metadata: { [key: string]: string };

  /**
   * TextRange is the range of the cell covering in the markdown source.
   *
   * @generated from field: runme.parser.v1.TextRange text_range = 5;
   */
  textRange?: TextRange;

  /**
   * Outputs are the outputs of the cell, e.g. stdout, stderr, or other media types.
   *
   * @generated from field: repeated runme.parser.v1.CellOutput outputs = 6;
   */
  outputs: CellOutput[];

  /**
   * ExecutionSummary is the summary of the cell execution, e.g. success/failure and execution time.
   *
   * @generated from field: runme.parser.v1.CellExecutionSummary execution_summary = 7;
   */
  executionSummary?: CellExecutionSummary;

  /**
   * RefID is the agent's original unique identifier.
   *
   * @generated from field: string ref_id = 100;
   */
  refId: string;

  /**
   * Role is the role of the cell, e.g. user or assistant.
   *
   * @generated from field: runme.parser.v1.CellRole role = 101;
   */
  role: CellRole;

  /**
   * CallID is the unique identifier of the cell call.
   *
   * @generated from field: string call_id = 102;
   */
  callId: string;

  /**
   * DocResults are doc results for a cell returned by, e.g., file search
   *
   * @generated from field: repeated runme.parser.v1.DocResult doc_results = 103;
   */
  docResults: DocResult[];
};

/**
 * @generated from message runme.parser.v1.Cell
 */
export declare type CellJson = {
  /**
   * CellKind is the type of cell, e.g. markup or code.
   *
   * @generated from field: runme.parser.v1.CellKind kind = 1;
   */
  kind?: CellKindJson;

  /**
   * Value is the contents of the cell.
   *
   * @generated from field: string value = 2;
   */
  value?: string;

  /**
   * LanguageID is the language of the cell.
   *
   * @generated from field: string language_id = 3;
   */
  languageId?: string;

  /**
   * Metadata is additional metadata about the cell in k/v format.
   *
   * @generated from field: map<string, string> metadata = 4;
   */
  metadata?: { [key: string]: string };

  /**
   * TextRange is the range of the cell covering in the markdown source.
   *
   * @generated from field: runme.parser.v1.TextRange text_range = 5;
   */
  textRange?: TextRangeJson;

  /**
   * Outputs are the outputs of the cell, e.g. stdout, stderr, or other media types.
   *
   * @generated from field: repeated runme.parser.v1.CellOutput outputs = 6;
   */
  outputs?: CellOutputJson[];

  /**
   * ExecutionSummary is the summary of the cell execution, e.g. success/failure and execution time.
   *
   * @generated from field: runme.parser.v1.CellExecutionSummary execution_summary = 7;
   */
  executionSummary?: CellExecutionSummaryJson;

  /**
   * RefID is the agent's original unique identifier.
   *
   * @generated from field: string ref_id = 100;
   */
  refId?: string;

  /**
   * Role is the role of the cell, e.g. user or assistant.
   *
   * @generated from field: runme.parser.v1.CellRole role = 101;
   */
  role?: CellRoleJson;

  /**
   * CallID is the unique identifier of the cell call.
   *
   * @generated from field: string call_id = 102;
   */
  callId?: string;

  /**
   * DocResults are doc results for a cell returned by, e.g., file search
   *
   * @generated from field: repeated runme.parser.v1.DocResult doc_results = 103;
   */
  docResults?: DocResultJson[];
};

/**
 * Describes the message runme.parser.v1.Cell.
 * Use `create(CellSchema)` to create a new message.
 */
export declare const CellSchema: GenMessage<Cell, {jsonType: CellJson}>;

/**
 * @generated from message runme.parser.v1.RunmeSessionDocument
 */
export declare type RunmeSessionDocument = Message<"runme.parser.v1.RunmeSessionDocument"> & {
  /**
   * @generated from field: string relative_path = 1;
   */
  relativePath: string;
};

/**
 * @generated from message runme.parser.v1.RunmeSessionDocument
 */
export declare type RunmeSessionDocumentJson = {
  /**
   * @generated from field: string relative_path = 1;
   */
  relativePath?: string;
};

/**
 * Describes the message runme.parser.v1.RunmeSessionDocument.
 * Use `create(RunmeSessionDocumentSchema)` to create a new message.
 */
export declare const RunmeSessionDocumentSchema: GenMessage<RunmeSessionDocument, {jsonType: RunmeSessionDocumentJson}>;

/**
 * @generated from message runme.parser.v1.RunmeSession
 */
export declare type RunmeSession = Message<"runme.parser.v1.RunmeSession"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: runme.parser.v1.RunmeSessionDocument document = 2;
   */
  document?: RunmeSessionDocument;
};

/**
 * @generated from message runme.parser.v1.RunmeSession
 */
export declare type RunmeSessionJson = {
  /**
   * @generated from field: string id = 1;
   */
  id?: string;

  /**
   * @generated from field: runme.parser.v1.RunmeSessionDocument document = 2;
   */
  document?: RunmeSessionDocumentJson;
};

/**
 * Describes the message runme.parser.v1.RunmeSession.
 * Use `create(RunmeSessionSchema)` to create a new message.
 */
export declare const RunmeSessionSchema: GenMessage<RunmeSession, {jsonType: RunmeSessionJson}>;

/**
 * @generated from message runme.parser.v1.FrontmatterRunme
 */
export declare type FrontmatterRunme = Message<"runme.parser.v1.FrontmatterRunme"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string version = 2;
   */
  version: string;

  /**
   * @generated from field: runme.parser.v1.RunmeSession session = 3;
   */
  session?: RunmeSession;
};

/**
 * @generated from message runme.parser.v1.FrontmatterRunme
 */
export declare type FrontmatterRunmeJson = {
  /**
   * @generated from field: string id = 1;
   */
  id?: string;

  /**
   * @generated from field: string version = 2;
   */
  version?: string;

  /**
   * @generated from field: runme.parser.v1.RunmeSession session = 3;
   */
  session?: RunmeSessionJson;
};

/**
 * Describes the message runme.parser.v1.FrontmatterRunme.
 * Use `create(FrontmatterRunmeSchema)` to create a new message.
 */
export declare const FrontmatterRunmeSchema: GenMessage<FrontmatterRunme, {jsonType: FrontmatterRunmeJson}>;

/**
 * @generated from message runme.parser.v1.Frontmatter
 */
export declare type Frontmatter = Message<"runme.parser.v1.Frontmatter"> & {
  /**
   * @generated from field: string shell = 1;
   */
  shell: string;

  /**
   * @generated from field: string cwd = 2;
   */
  cwd: string;

  /**
   * @generated from field: bool skip_prompts = 3;
   */
  skipPrompts: boolean;

  /**
   * @generated from field: runme.parser.v1.FrontmatterRunme runme = 4;
   */
  runme?: FrontmatterRunme;

  /**
   * Deprecated category in favor of Tag
   *
   * @generated from field: string category = 5;
   */
  category: string;

  /**
   * @generated from field: string terminal_rows = 6;
   */
  terminalRows: string;

  /**
   * @generated from field: string tag = 7;
   */
  tag: string;
};

/**
 * @generated from message runme.parser.v1.Frontmatter
 */
export declare type FrontmatterJson = {
  /**
   * @generated from field: string shell = 1;
   */
  shell?: string;

  /**
   * @generated from field: string cwd = 2;
   */
  cwd?: string;

  /**
   * @generated from field: bool skip_prompts = 3;
   */
  skipPrompts?: boolean;

  /**
   * @generated from field: runme.parser.v1.FrontmatterRunme runme = 4;
   */
  runme?: FrontmatterRunmeJson;

  /**
   * Deprecated category in favor of Tag
   *
   * @generated from field: string category = 5;
   */
  category?: string;

  /**
   * @generated from field: string terminal_rows = 6;
   */
  terminalRows?: string;

  /**
   * @generated from field: string tag = 7;
   */
  tag?: string;
};

/**
 * Describes the message runme.parser.v1.Frontmatter.
 * Use `create(FrontmatterSchema)` to create a new message.
 */
export declare const FrontmatterSchema: GenMessage<Frontmatter, {jsonType: FrontmatterJson}>;

/**
 * @generated from message runme.parser.v1.DeserializeRequestOptions
 */
export declare type DeserializeRequestOptions = Message<"runme.parser.v1.DeserializeRequestOptions"> & {
  /**
   * @generated from field: runme.parser.v1.RunmeIdentity identity = 1;
   */
  identity: RunmeIdentity;
};

/**
 * @generated from message runme.parser.v1.DeserializeRequestOptions
 */
export declare type DeserializeRequestOptionsJson = {
  /**
   * @generated from field: runme.parser.v1.RunmeIdentity identity = 1;
   */
  identity?: RunmeIdentityJson;
};

/**
 * Describes the message runme.parser.v1.DeserializeRequestOptions.
 * Use `create(DeserializeRequestOptionsSchema)` to create a new message.
 */
export declare const DeserializeRequestOptionsSchema: GenMessage<DeserializeRequestOptions, {jsonType: DeserializeRequestOptionsJson}>;

/**
 * @generated from message runme.parser.v1.DeserializeRequest
 */
export declare type DeserializeRequest = Message<"runme.parser.v1.DeserializeRequest"> & {
  /**
   * @generated from field: bytes source = 1;
   */
  source: Uint8Array;

  /**
   * @generated from field: runme.parser.v1.DeserializeRequestOptions options = 2;
   */
  options?: DeserializeRequestOptions;
};

/**
 * @generated from message runme.parser.v1.DeserializeRequest
 */
export declare type DeserializeRequestJson = {
  /**
   * @generated from field: bytes source = 1;
   */
  source?: string;

  /**
   * @generated from field: runme.parser.v1.DeserializeRequestOptions options = 2;
   */
  options?: DeserializeRequestOptionsJson;
};

/**
 * Describes the message runme.parser.v1.DeserializeRequest.
 * Use `create(DeserializeRequestSchema)` to create a new message.
 */
export declare const DeserializeRequestSchema: GenMessage<DeserializeRequest, {jsonType: DeserializeRequestJson}>;

/**
 * @generated from message runme.parser.v1.DeserializeResponse
 */
export declare type DeserializeResponse = Message<"runme.parser.v1.DeserializeResponse"> & {
  /**
   * @generated from field: runme.parser.v1.Notebook notebook = 1;
   */
  notebook?: Notebook;
};

/**
 * @generated from message runme.parser.v1.DeserializeResponse
 */
export declare type DeserializeResponseJson = {
  /**
   * @generated from field: runme.parser.v1.Notebook notebook = 1;
   */
  notebook?: NotebookJson;
};

/**
 * Describes the message runme.parser.v1.DeserializeResponse.
 * Use `create(DeserializeResponseSchema)` to create a new message.
 */
export declare const DeserializeResponseSchema: GenMessage<DeserializeResponse, {jsonType: DeserializeResponseJson}>;

/**
 * @generated from message runme.parser.v1.SerializeRequestOutputOptions
 */
export declare type SerializeRequestOutputOptions = Message<"runme.parser.v1.SerializeRequestOutputOptions"> & {
  /**
   * @generated from field: bool enabled = 1;
   */
  enabled: boolean;

  /**
   * @generated from field: bool summary = 2;
   */
  summary: boolean;
};

/**
 * @generated from message runme.parser.v1.SerializeRequestOutputOptions
 */
export declare type SerializeRequestOutputOptionsJson = {
  /**
   * @generated from field: bool enabled = 1;
   */
  enabled?: boolean;

  /**
   * @generated from field: bool summary = 2;
   */
  summary?: boolean;
};

/**
 * Describes the message runme.parser.v1.SerializeRequestOutputOptions.
 * Use `create(SerializeRequestOutputOptionsSchema)` to create a new message.
 */
export declare const SerializeRequestOutputOptionsSchema: GenMessage<SerializeRequestOutputOptions, {jsonType: SerializeRequestOutputOptionsJson}>;

/**
 * @generated from message runme.parser.v1.SerializeRequestOptions
 */
export declare type SerializeRequestOptions = Message<"runme.parser.v1.SerializeRequestOptions"> & {
  /**
   * @generated from field: runme.parser.v1.SerializeRequestOutputOptions outputs = 1;
   */
  outputs?: SerializeRequestOutputOptions;

  /**
   * @generated from field: runme.parser.v1.RunmeSession session = 2;
   */
  session?: RunmeSession;
};

/**
 * @generated from message runme.parser.v1.SerializeRequestOptions
 */
export declare type SerializeRequestOptionsJson = {
  /**
   * @generated from field: runme.parser.v1.SerializeRequestOutputOptions outputs = 1;
   */
  outputs?: SerializeRequestOutputOptionsJson;

  /**
   * @generated from field: runme.parser.v1.RunmeSession session = 2;
   */
  session?: RunmeSessionJson;
};

/**
 * Describes the message runme.parser.v1.SerializeRequestOptions.
 * Use `create(SerializeRequestOptionsSchema)` to create a new message.
 */
export declare const SerializeRequestOptionsSchema: GenMessage<SerializeRequestOptions, {jsonType: SerializeRequestOptionsJson}>;

/**
 * @generated from message runme.parser.v1.SerializeRequest
 */
export declare type SerializeRequest = Message<"runme.parser.v1.SerializeRequest"> & {
  /**
   * @generated from field: runme.parser.v1.Notebook notebook = 1;
   */
  notebook?: Notebook;

  /**
   * @generated from field: runme.parser.v1.SerializeRequestOptions options = 2;
   */
  options?: SerializeRequestOptions;
};

/**
 * @generated from message runme.parser.v1.SerializeRequest
 */
export declare type SerializeRequestJson = {
  /**
   * @generated from field: runme.parser.v1.Notebook notebook = 1;
   */
  notebook?: NotebookJson;

  /**
   * @generated from field: runme.parser.v1.SerializeRequestOptions options = 2;
   */
  options?: SerializeRequestOptionsJson;
};

/**
 * Describes the message runme.parser.v1.SerializeRequest.
 * Use `create(SerializeRequestSchema)` to create a new message.
 */
export declare const SerializeRequestSchema: GenMessage<SerializeRequest, {jsonType: SerializeRequestJson}>;

/**
 * @generated from message runme.parser.v1.SerializeResponse
 */
export declare type SerializeResponse = Message<"runme.parser.v1.SerializeResponse"> & {
  /**
   * @generated from field: bytes result = 1;
   */
  result: Uint8Array;
};

/**
 * @generated from message runme.parser.v1.SerializeResponse
 */
export declare type SerializeResponseJson = {
  /**
   * @generated from field: bytes result = 1;
   */
  result?: string;
};

/**
 * Describes the message runme.parser.v1.SerializeResponse.
 * Use `create(SerializeResponseSchema)` to create a new message.
 */
export declare const SerializeResponseSchema: GenMessage<SerializeResponse, {jsonType: SerializeResponseJson}>;

/**
 * @generated from enum runme.parser.v1.CellKind
 */
export enum CellKind {
  /**
   * @generated from enum value: CELL_KIND_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: CELL_KIND_MARKUP = 1;
   */
  MARKUP = 1,

  /**
   * @generated from enum value: CELL_KIND_CODE = 2;
   */
  CODE = 2,

  /**
   * todo(sebastian): is this needed?
   *
   * @generated from enum value: CELL_KIND_DOC_RESULTS = 3;
   */
  DOC_RESULTS = 3,
}

/**
 * @generated from enum runme.parser.v1.CellKind
 */
export declare type CellKindJson = "CELL_KIND_UNSPECIFIED" | "CELL_KIND_MARKUP" | "CELL_KIND_CODE" | "CELL_KIND_DOC_RESULTS";

/**
 * Describes the enum runme.parser.v1.CellKind.
 */
export declare const CellKindSchema: GenEnum<CellKind, CellKindJson>;

/**
 * @generated from enum runme.parser.v1.CellRole
 */
export enum CellRole {
  /**
   * @generated from enum value: CELL_ROLE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: CELL_ROLE_USER = 1;
   */
  USER = 1,

  /**
   * @generated from enum value: CELL_ROLE_ASSISTANT = 2;
   */
  ASSISTANT = 2,
}

/**
 * @generated from enum runme.parser.v1.CellRole
 */
export declare type CellRoleJson = "CELL_ROLE_UNSPECIFIED" | "CELL_ROLE_USER" | "CELL_ROLE_ASSISTANT";

/**
 * Describes the enum runme.parser.v1.CellRole.
 */
export declare const CellRoleSchema: GenEnum<CellRole, CellRoleJson>;

/**
 * RunmeIdentity controls if unique identifiers are inserted if not present.
 *
 * @generated from enum runme.parser.v1.RunmeIdentity
 */
export enum RunmeIdentity {
  /**
   * aka NONE
   *
   * @generated from enum value: RUNME_IDENTITY_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: RUNME_IDENTITY_ALL = 1;
   */
  ALL = 1,

  /**
   * @generated from enum value: RUNME_IDENTITY_DOCUMENT = 2;
   */
  DOCUMENT = 2,

  /**
   * @generated from enum value: RUNME_IDENTITY_CELL = 3;
   */
  CELL = 3,
}

/**
 * RunmeIdentity controls if unique identifiers are inserted if not present.
 *
 * @generated from enum runme.parser.v1.RunmeIdentity
 */
export declare type RunmeIdentityJson = "RUNME_IDENTITY_UNSPECIFIED" | "RUNME_IDENTITY_ALL" | "RUNME_IDENTITY_DOCUMENT" | "RUNME_IDENTITY_CELL";

/**
 * Describes the enum runme.parser.v1.RunmeIdentity.
 */
export declare const RunmeIdentitySchema: GenEnum<RunmeIdentity, RunmeIdentityJson>;

/**
 * @generated from service runme.parser.v1.ParserService
 */
export declare const ParserService: GenService<{
  /**
   * @generated from rpc runme.parser.v1.ParserService.Deserialize
   */
  deserialize: {
    methodKind: "unary";
    input: typeof DeserializeRequestSchema;
    output: typeof DeserializeResponseSchema;
  },
  /**
   * @generated from rpc runme.parser.v1.ParserService.Serialize
   */
  serialize: {
    methodKind: "unary";
    input: typeof SerializeRequestSchema;
    output: typeof SerializeResponseSchema;
  },
}>;
