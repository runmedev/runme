// @generated by protoc-gen-es v2.6.0 with parameter "target=js+dts,import_extension=none,json_types=true"
// @generated from file agent/v1/tools.proto (package agent.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";
import type { Cell, CellJson } from "../../runme/parser/v1/parser_pb";

/**
 * Describes the file agent/v1/tools.proto.
 */
export declare const file_agent_v1_tools: GenFile;

/**
 * @generated from message agent.v1.ListCellsRequest
 */
export declare type ListCellsRequest = Message<"agent.v1.ListCellsRequest"> & {
};

/**
 * @generated from message agent.v1.ListCellsRequest
 */
export declare type ListCellsRequestJson = {
};

/**
 * Describes the message agent.v1.ListCellsRequest.
 * Use `create(ListCellsRequestSchema)` to create a new message.
 */
export declare const ListCellsRequestSchema: GenMessage<ListCellsRequest, {jsonType: ListCellsRequestJson}>;

/**
 * @generated from message agent.v1.ListCellResponses
 */
export declare type ListCellResponses = Message<"agent.v1.ListCellResponses"> & {
  /**
   * @generated from field: repeated runme.parser.v1.Cell cells = 2;
   */
  cells: Cell[];
};

/**
 * @generated from message agent.v1.ListCellResponses
 */
export declare type ListCellResponsesJson = {
  /**
   * @generated from field: repeated runme.parser.v1.Cell cells = 2;
   */
  cells?: CellJson[];
};

/**
 * Describes the message agent.v1.ListCellResponses.
 * Use `create(ListCellResponsesSchema)` to create a new message.
 */
export declare const ListCellResponsesSchema: GenMessage<ListCellResponses, {jsonType: ListCellResponsesJson}>;

/**
 * @generated from message agent.v1.GetCellRequest
 */
export declare type GetCellRequest = Message<"agent.v1.GetCellRequest"> & {
  /**
   * @generated from field: repeated string ref_ids = 1;
   */
  refIds: string[];
};

/**
 * @generated from message agent.v1.GetCellRequest
 */
export declare type GetCellRequestJson = {
  /**
   * @generated from field: repeated string ref_ids = 1;
   */
  refIds?: string[];
};

/**
 * Describes the message agent.v1.GetCellRequest.
 * Use `create(GetCellRequestSchema)` to create a new message.
 */
export declare const GetCellRequestSchema: GenMessage<GetCellRequest, {jsonType: GetCellRequestJson}>;

/**
 * @generated from message agent.v1.GetCellResponse
 */
export declare type GetCellResponse = Message<"agent.v1.GetCellResponse"> & {
  /**
   * @generated from field: runme.parser.v1.Cell cell = 1;
   */
  cell?: Cell;
};

/**
 * @generated from message agent.v1.GetCellResponse
 */
export declare type GetCellResponseJson = {
  /**
   * @generated from field: runme.parser.v1.Cell cell = 1;
   */
  cell?: CellJson;
};

/**
 * Describes the message agent.v1.GetCellResponse.
 * Use `create(GetCellResponseSchema)` to create a new message.
 */
export declare const GetCellResponseSchema: GenMessage<GetCellResponse, {jsonType: GetCellResponseJson}>;

/**
 * @generated from message agent.v1.UpdateCellRequest
 */
export declare type UpdateCellRequest = Message<"agent.v1.UpdateCellRequest"> & {
  /**
   * @generated from field: runme.parser.v1.Cell cell = 1;
   */
  cell?: Cell;
};

/**
 * @generated from message agent.v1.UpdateCellRequest
 */
export declare type UpdateCellRequestJson = {
  /**
   * @generated from field: runme.parser.v1.Cell cell = 1;
   */
  cell?: CellJson;
};

/**
 * Describes the message agent.v1.UpdateCellRequest.
 * Use `create(UpdateCellRequestSchema)` to create a new message.
 */
export declare const UpdateCellRequestSchema: GenMessage<UpdateCellRequest, {jsonType: UpdateCellRequestJson}>;

/**
 * @generated from message agent.v1.UpdateCellResponse
 */
export declare type UpdateCellResponse = Message<"agent.v1.UpdateCellResponse"> & {
};

/**
 * @generated from message agent.v1.UpdateCellResponse
 */
export declare type UpdateCellResponseJson = {
};

/**
 * Describes the message agent.v1.UpdateCellResponse.
 * Use `create(UpdateCellResponseSchema)` to create a new message.
 */
export declare const UpdateCellResponseSchema: GenMessage<UpdateCellResponse, {jsonType: UpdateCellResponseJson}>;

/**
 * NotebookService defines methods the AI can use to interact with the notebook.
 * This is used to generate JSON schemas that can be used to define tool calls (or potentially) MCP server.
 * Using https://github.com/redpanda-data/protoc-gen-go-mcp.
 *
 * It looks like only comments on the method get translated into the description.
 *
 * @generated from service agent.v1.NotebookService
 */
export declare const NotebookService: GenService<{
  /**
   * UpdateCell updates a cell in the document.
   * Cell is the cell to create or update. To update
   * an existing cell specify the ID of that cell in the ref_id field.
   * To create a new cell leave ref_id blank.
   *
   * You can use cell.metadata["agent/summary"] to include a short summary or description of the cell.
   * You should set the description so that its useful for deciding what cells you should read to answer the user's
   * queries.
   *
   * @generated from rpc agent.v1.NotebookService.UpdateCell
   */
  updateCell: {
    methodKind: "unary";
    input: typeof UpdateCellRequestSchema;
    output: typeof UpdateCellResponseSchema;
  },
  /**
   * GetCells fetches the cells with the given ref_ids.
   * Use this to read the contents of cells in the notebook.
   *
   * @generated from rpc agent.v1.NotebookService.GetCells
   */
  getCells: {
    methodKind: "unary";
    input: typeof GetCellRequestSchema;
    output: typeof GetCellResponseSchema;
  },
  /**
   * ListCells lists the cells in a notebook.
   * Important: Only the ref_id and metadata will be populated. You should use that to decide
   * which cells to read.
   *
   * @generated from rpc agent.v1.NotebookService.ListCells
   */
  listCells: {
    methodKind: "unary";
    input: typeof ListCellsRequestSchema;
    output: typeof ListCellResponsesSchema;
  },
}>;

