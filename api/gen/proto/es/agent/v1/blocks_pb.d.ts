// @generated by protoc-gen-es v2.2.3 with parameter "import_extension=js"
// @generated from file agent/v1/blocks.proto (package agent.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { FileSearchResult } from "./filesearch_pb.js";

/**
 * Describes the file agent/v1/blocks.proto.
 */
export declare const file_agent_v1_blocks: GenFile;

/**
 * Block represents the data in an element in the UI.
 *
 * @generated from message agent.v1.Block
 */
export declare type Block = Message<"agent.v1.Block"> & {
  /**
   * BlockKind is an enum indicating what type of block it is e.g text or output
   *
   * @generated from field: agent.v1.BlockKind kind = 1;
   */
  kind: BlockKind;

  /**
   * language is a string identifying the language.
   *
   * @generated from field: string language = 2;
   */
  language: string;

  /**
   * contents is the actual contents of the block.
   * Not the outputs of the block.
   *
   * @generated from field: string contents = 3;
   */
  contents: string;

  /**
   * ID of the block.
   *
   * @generated from field: string id = 7;
   */
  id: string;

  /**
   * Additional metadata
   *
   * @generated from field: map<string, string> metadata = 8;
   */
  metadata: { [key: string]: string };

  /**
   * @generated from field: agent.v1.BlockRole role = 9;
   */
  role: BlockRole;

  /**
   * @generated from field: repeated agent.v1.FileSearchResult file_search_results = 10;
   */
  fileSearchResults: FileSearchResult[];

  /**
   * @generated from field: repeated agent.v1.BlockOutput outputs = 11;
   */
  outputs: BlockOutput[];

  /**
   * Call ID is the id of this function call as set by OpenAI
   *
   * @generated from field: string call_id = 12;
   */
  callId: string;
};

/**
 * Describes the message agent.v1.Block.
 * Use `create(BlockSchema)` to create a new message.
 */
export declare const BlockSchema: GenMessage<Block>;

/**
 * BlockOutput represents the output of a block.
 * It corresponds to a VSCode NotebookCellOutput
 * https://github.com/microsoft/vscode/blob/98332892fd2cb3c948ced33f542698e20c6279b9/src/vscode-dts/vscode.d.ts#L14835
 *
 * @generated from message agent.v1.BlockOutput
 */
export declare type BlockOutput = Message<"agent.v1.BlockOutput"> & {
  /**
   * items is the output items. Each item is the different representation of the same output data
   *
   * @generated from field: repeated agent.v1.BlockOutputItem items = 1;
   */
  items: BlockOutputItem[];

  /**
   * @generated from field: agent.v1.BlockOutputKind kind = 2;
   */
  kind: BlockOutputKind;
};

/**
 * Describes the message agent.v1.BlockOutput.
 * Use `create(BlockOutputSchema)` to create a new message.
 */
export declare const BlockOutputSchema: GenMessage<BlockOutput>;

/**
 * BlockOutputItem represents an item in a block output.
 * It corresponds to a VSCode NotebookCellOutputItem
 * https://github.com/microsoft/vscode/blob/98332892fd2cb3c948ced33f542698e20c6279b9/src/vscode-dts/vscode.d.ts#L14753
 *
 * @generated from message agent.v1.BlockOutputItem
 */
export declare type BlockOutputItem = Message<"agent.v1.BlockOutputItem"> & {
  /**
   * mime is the mime type of the output item.
   *
   * @generated from field: string mime = 1;
   */
  mime: string;

  /**
   * value of the output item.
   * We use string data type and not bytes because the JSON representation of bytes is a base64
   * string. vscode data uses a byte. We may need to add support for bytes to support non text data
   * data in the future.
   *
   * @generated from field: string text_data = 2;
   */
  textData: string;
};

/**
 * Describes the message agent.v1.BlockOutputItem.
 * Use `create(BlockOutputItemSchema)` to create a new message.
 */
export declare const BlockOutputItemSchema: GenMessage<BlockOutputItem>;

/**
 * @generated from message agent.v1.GenerateRequest
 */
export declare type GenerateRequest = Message<"agent.v1.GenerateRequest"> & {
  /**
   * @generated from field: repeated agent.v1.Block blocks = 1;
   */
  blocks: Block[];

  /**
   * @generated from field: string previous_response_id = 2;
   */
  previousResponseId: string;

  /**
   * openai_access_token is the OpenAI access token to use when contacting the OpenAI API.
   *
   * @generated from field: string openai_access_token = 3;
   */
  openaiAccessToken: string;
};

/**
 * Describes the message agent.v1.GenerateRequest.
 * Use `create(GenerateRequestSchema)` to create a new message.
 */
export declare const GenerateRequestSchema: GenMessage<GenerateRequest>;

/**
 * @generated from message agent.v1.GenerateResponse
 */
export declare type GenerateResponse = Message<"agent.v1.GenerateResponse"> & {
  /**
   * @generated from field: repeated agent.v1.Block blocks = 1;
   */
  blocks: Block[];

  /**
   * @generated from field: string response_id = 2;
   */
  responseId: string;
};

/**
 * Describes the message agent.v1.GenerateResponse.
 * Use `create(GenerateResponseSchema)` to create a new message.
 */
export declare const GenerateResponseSchema: GenMessage<GenerateResponse>;

/**
 * @generated from enum agent.v1.BlockKind
 */
export enum BlockKind {
  /**
   * @generated from enum value: BLOCK_KIND_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: BLOCK_KIND_MARKUP = 1;
   */
  MARKUP = 1,

  /**
   * @generated from enum value: BLOCK_KIND_CODE = 2;
   */
  CODE = 2,

  /**
   * @generated from enum value: BLOCK_KIND_FILE_SEARCH_RESULTS = 3;
   */
  FILE_SEARCH_RESULTS = 3,
}

/**
 * Describes the enum agent.v1.BlockKind.
 */
export declare const BlockKindSchema: GenEnum<BlockKind>;

/**
 * @generated from enum agent.v1.BlockRole
 */
export enum BlockRole {
  /**
   * @generated from enum value: BLOCK_ROLE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: BLOCK_ROLE_USER = 1;
   */
  USER = 1,

  /**
   * @generated from enum value: BLOCK_ROLE_ASSISTANT = 2;
   */
  ASSISTANT = 2,
}

/**
 * Describes the enum agent.v1.BlockRole.
 */
export declare const BlockRoleSchema: GenEnum<BlockRole>;

/**
 * @generated from enum agent.v1.BlockOutputKind
 */
export enum BlockOutputKind {
  /**
   * @generated from enum value: BLOCK_OUTPUT_KIND_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: BLOCK_OUTPUT_KIND_STDOUT = 1;
   */
  STDOUT = 1,

  /**
   * @generated from enum value: BLOCK_OUTPUT_KIND_STDERR = 2;
   */
  STDERR = 2,
}

/**
 * Describes the enum agent.v1.BlockOutputKind.
 */
export declare const BlockOutputKindSchema: GenEnum<BlockOutputKind>;

/**
 * BlocksService generates blocks.
 *
 * @generated from service agent.v1.BlocksService
 */
export declare const BlocksService: GenService<{
  /**
   * Generate generates blocks. Responses are streamed.
   *
   * @generated from rpc agent.v1.BlocksService.Generate
   */
  generate: {
    methodKind: "server_streaming";
    input: typeof GenerateRequestSchema;
    output: typeof GenerateResponseSchema;
  },
}>;
