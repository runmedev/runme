// @generated by protoc-gen-es v2.6.0 with parameter "target=js+dts,import_extension=none,json_types=true"
// @generated from file agent/v1/service.proto (package agent.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";
import type { Cell, CellJson, Notebook, NotebookJson } from "../../runme/parser/v1/parser_pb";

/**
 * Describes the file agent/v1/service.proto.
 */
export declare const file_agent_v1_service: GenFile;

/**
 * @generated from message agent.v1.GenerateRequest
 */
export declare type GenerateRequest = Message<"agent.v1.GenerateRequest"> & {
  /**
   * @generated from field: repeated runme.parser.v1.Cell cells = 1;
   */
  cells: Cell[];

  /**
   * @generated from field: string previous_response_id = 2;
   */
  previousResponseId: string;

  /**
   * openai_access_token is the OpenAI access token to use when contacting the OpenAI API.
   *
   * @generated from field: string openai_access_token = 3;
   */
  openaiAccessToken: string;
};

/**
 * @generated from message agent.v1.GenerateRequest
 */
export declare type GenerateRequestJson = {
  /**
   * @generated from field: repeated runme.parser.v1.Cell cells = 1;
   */
  cells?: CellJson[];

  /**
   * @generated from field: string previous_response_id = 2;
   */
  previousResponseId?: string;

  /**
   * openai_access_token is the OpenAI access token to use when contacting the OpenAI API.
   *
   * @generated from field: string openai_access_token = 3;
   */
  openaiAccessToken?: string;
};

/**
 * Describes the message agent.v1.GenerateRequest.
 * Use `create(GenerateRequestSchema)` to create a new message.
 */
export declare const GenerateRequestSchema: GenMessage<GenerateRequest, {jsonType: GenerateRequestJson}>;

/**
 * @generated from message agent.v1.GenerateResponse
 */
export declare type GenerateResponse = Message<"agent.v1.GenerateResponse"> & {
  /**
   * @generated from field: repeated runme.parser.v1.Cell cells = 1;
   */
  cells: Cell[];

  /**
   * @generated from field: string response_id = 2;
   */
  responseId: string;
};

/**
 * @generated from message agent.v1.GenerateResponse
 */
export declare type GenerateResponseJson = {
  /**
   * @generated from field: repeated runme.parser.v1.Cell cells = 1;
   */
  cells?: CellJson[];

  /**
   * @generated from field: string response_id = 2;
   */
  responseId?: string;
};

/**
 * Describes the message agent.v1.GenerateResponse.
 * Use `create(GenerateResponseSchema)` to create a new message.
 */
export declare const GenerateResponseSchema: GenMessage<GenerateResponse, {jsonType: GenerateResponseJson}>;

/**
 * @generated from message agent.v1.LogRequest
 */
export declare type LogRequest = Message<"agent.v1.LogRequest"> & {
  /**
   * @generated from field: runme.parser.v1.Notebook notebook = 1;
   */
  notebook?: Notebook;
};

/**
 * @generated from message agent.v1.LogRequest
 */
export declare type LogRequestJson = {
  /**
   * @generated from field: runme.parser.v1.Notebook notebook = 1;
   */
  notebook?: NotebookJson;
};

/**
 * Describes the message agent.v1.LogRequest.
 * Use `create(LogRequestSchema)` to create a new message.
 */
export declare const LogRequestSchema: GenMessage<LogRequest, {jsonType: LogRequestJson}>;

/**
 * @generated from message agent.v1.LogResponse
 */
export declare type LogResponse = Message<"agent.v1.LogResponse"> & {
};

/**
 * @generated from message agent.v1.LogResponse
 */
export declare type LogResponseJson = {
};

/**
 * Describes the message agent.v1.LogResponse.
 * Use `create(LogResponseSchema)` to create a new message.
 */
export declare const LogResponseSchema: GenMessage<LogResponse, {jsonType: LogResponseJson}>;

/**
 * MessagesService generates blocks.
 *
 * @generated from service agent.v1.MessagesService
 */
export declare const MessagesService: GenService<{
  /**
   * Generate generates cells. Responses are streamed.
   *
   * @generated from rpc agent.v1.MessagesService.Generate
   */
  generate: {
    methodKind: "server_streaming";
    input: typeof GenerateRequestSchema;
    output: typeof GenerateResponseSchema;
  },
}>;

/**
 * @generated from service agent.v1.LogService
 */
export declare const LogService: GenService<{
  /**
   * @generated from rpc agent.v1.LogService.Log
   */
  log: {
    methodKind: "unary";
    input: typeof LogRequestSchema;
    output: typeof LogResponseSchema;
  },
}>;
