"""
 BlocksService generates blocks.

"""
directive @BlocksService on FIELD_DEFINITION
"""
 Block represents the data in an element in the UI.

"""
type Block {
	"""
	 BlockKind is an enum indicating what type of block it is e.g text or output

	"""
	kind: BlockKind
	"""
	 language is a string identifying the language.

	"""
	language: String
	"""
	 contents is the actual contents of the block.
	 Not the outputs of the block.

	"""
	contents: String
	"""
	 ID of the block.

	"""
	id: String
	"""
	 Additional metadata

	"""
	metadata: [Block_MetadataEntry!]
	role: BlockRole
	fileSearchResults: [FileSearchResult!]
	outputs: [BlockOutput!]
	"""
	 Call ID is the id of this function call as set by OpenAI

	"""
	callId: String
}
"""
 Block represents the data in an element in the UI.

"""
input BlockInput {
	"""
	 BlockKind is an enum indicating what type of block it is e.g text or output

	"""
	kind: BlockKind
	"""
	 language is a string identifying the language.

	"""
	language: String
	"""
	 contents is the actual contents of the block.
	 Not the outputs of the block.

	"""
	contents: String
	"""
	 ID of the block.

	"""
	id: String
	"""
	 Additional metadata

	"""
	metadata: [Block_MetadataEntryInput!]
	role: BlockRole
	fileSearchResults: [FileSearchResultInput!]
	outputs: [BlockOutputInput!]
	"""
	 Call ID is the id of this function call as set by OpenAI

	"""
	callId: String
}
enum BlockKind {
	UNKNOWN_BLOCK_KIND
	MARKUP
	CODE
	FILE_SEARCH_RESULTS
}
"""
 BlockOutput represents the output of a block.
 It corresponds to a VSCode NotebookCellOutput
 https://github.com/microsoft/vscode/blob/98332892fd2cb3c948ced33f542698e20c6279b9/src/vscode-dts/vscode.d.ts#L14835

"""
type BlockOutput {
	"""
	 items is the output items. Each item is the different representation of the same output data

	"""
	items: [BlockOutputItem!]
	kind: BlockOutputKind
}
"""
 BlockOutput represents the output of a block.
 It corresponds to a VSCode NotebookCellOutput
 https://github.com/microsoft/vscode/blob/98332892fd2cb3c948ced33f542698e20c6279b9/src/vscode-dts/vscode.d.ts#L14835

"""
input BlockOutputInput {
	"""
	 items is the output items. Each item is the different representation of the same output data

	"""
	items: [BlockOutputItemInput!]
	kind: BlockOutputKind
}
"""
 BlockOutputItem represents an item in a block output.
 It corresponds to a VSCode NotebookCellOutputItem
 https://github.com/microsoft/vscode/blob/98332892fd2cb3c948ced33f542698e20c6279b9/src/vscode-dts/vscode.d.ts#L14753

"""
type BlockOutputItem {
	"""
	 mime is the mime type of the output item.

	"""
	mime: String
	"""
	 value of the output item.
	 We use string data type and not bytes because the JSON representation of bytes is a base64
	 string. vscode data uses a byte. We may need to add support for bytes to support non text data
	 data in the future.

	"""
	textData: String
}
"""
 BlockOutputItem represents an item in a block output.
 It corresponds to a VSCode NotebookCellOutputItem
 https://github.com/microsoft/vscode/blob/98332892fd2cb3c948ced33f542698e20c6279b9/src/vscode-dts/vscode.d.ts#L14753

"""
input BlockOutputItemInput {
	"""
	 mime is the mime type of the output item.

	"""
	mime: String
	"""
	 value of the output item.
	 We use string data type and not bytes because the JSON representation of bytes is a base64
	 string. vscode data uses a byte. We may need to add support for bytes to support non text data
	 data in the future.

	"""
	textData: String
}
enum BlockOutputKind {
	UNKNOWN_BLOCK_OUTPUT_KIND
	STDOUT
	STDERR
}
enum BlockRole {
	BLOCK_ROLE_UNKNOWN
	BLOCK_ROLE_USER
	BLOCK_ROLE_ASSISTANT
}
type Block_MetadataEntry {
	key: String
	value: String
}
input Block_MetadataEntryInput {
	key: String
	value: String
}
type FileSearchResult {
	"""
	 The unique ID of the file.

	"""
	fileID: String
	"""
	 The name of the file.

	"""
	fileName: String
	"""
	 The relevance score of the file.

	"""
	score: Float
	"""
	 Link to display for this file

	 TOO(jlewi): Should we include the file contents?

	"""
	link: String
}
input FileSearchResultInput {
	"""
	 The unique ID of the file.

	"""
	fileID: String
	"""
	 The name of the file.

	"""
	fileName: String
	"""
	 The relevance score of the file.

	"""
	score: Float
	"""
	 Link to display for this file

	 TOO(jlewi): Should we include the file contents?

	"""
	link: String
}
input GenerateRequestInput {
	blocks: [BlockInput!]
	previousResponseId: String
	"""
	 openai_access_token is the OpenAI access token to use when contacting the OpenAI API.

	"""
	openaiAccessToken: String
}
type GenerateResponse {
	blocks: [Block!]
	responseId: String
}
type Query {
	dummy: Boolean
}
type Subscription {
	"""
	 Generate generates blocks. Responses are streamed.

	"""
	blocksServiceGenerate(in: GenerateRequestInput): GenerateResponse
}
