/* eslint-disable */
// @generated by protobuf-ts 2.11.1 with parameter output_javascript,optimize_code_size,long_type_string,add_pb_suffix,ts_nocheck,eslint_disable
// @generated from protobuf file "agent/v1/tools.proto" (package "agent.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import type { ListCellResponses } from "./tools_pb";
import type { ListCellsRequest } from "./tools_pb";
import type { GetCellResponse } from "./tools_pb";
import type { GetCellRequest } from "./tools_pb";
import type { UpdateCellResponse } from "./tools_pb";
import type { UpdateCellRequest } from "./tools_pb";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * NotebookService defines methods the AI can use to interact with the notebook.
 * This is used to generate JSON schemas that can be used to define tool calls (or potentially) MCP server.
 * Using https://github.com/redpanda-data/protoc-gen-go-mcp.
 *
 * It looks like only comments on the method get translated into the description.
 *
 * @generated from protobuf service agent.v1.NotebookService
 */
export interface INotebookServiceClient {
    /**
     * UpdateCell updates a cell in the document.
     * Cell is the cell to create or update. To update
     * an existing cell specify the ID of that cell in the ref_id field.
     * To create a new cell leave ref_id blank.
     *
     * You can use cell.metadata["agent/summary"] to include a short summary or description of the cell.
     * You should set the description so that its useful for deciding what cells you should read to answer the user's
     * queries.
     *
     * @generated from protobuf rpc: UpdateCell
     */
    updateCell(input: UpdateCellRequest, options?: RpcOptions): UnaryCall<UpdateCellRequest, UpdateCellResponse>;
    /**
     * GetCells fetches the cells with the given ref_ids.
     * Use this to read the contents of cells in the notebook.
     *
     * @generated from protobuf rpc: GetCells
     */
    getCells(input: GetCellRequest, options?: RpcOptions): UnaryCall<GetCellRequest, GetCellResponse>;
    /**
     * ListCells lists the cells in a notebook.
     * Important: Only the ref_id and metadata will be populated. You should use that to decide
     * which cells to read.
     *
     * @generated from protobuf rpc: ListCells
     */
    listCells(input: ListCellsRequest, options?: RpcOptions): UnaryCall<ListCellsRequest, ListCellResponses>;
}
/**
 * NotebookService defines methods the AI can use to interact with the notebook.
 * This is used to generate JSON schemas that can be used to define tool calls (or potentially) MCP server.
 * Using https://github.com/redpanda-data/protoc-gen-go-mcp.
 *
 * It looks like only comments on the method get translated into the description.
 *
 * @generated from protobuf service agent.v1.NotebookService
 */
export declare class NotebookServiceClient implements INotebookServiceClient, ServiceInfo {
    private readonly _transport;
    typeName: any;
    methods: any;
    options: any;
    constructor(_transport: RpcTransport);
    /**
     * UpdateCell updates a cell in the document.
     * Cell is the cell to create or update. To update
     * an existing cell specify the ID of that cell in the ref_id field.
     * To create a new cell leave ref_id blank.
     *
     * You can use cell.metadata["agent/summary"] to include a short summary or description of the cell.
     * You should set the description so that its useful for deciding what cells you should read to answer the user's
     * queries.
     *
     * @generated from protobuf rpc: UpdateCell
     */
    updateCell(input: UpdateCellRequest, options?: RpcOptions): UnaryCall<UpdateCellRequest, UpdateCellResponse>;
    /**
     * GetCells fetches the cells with the given ref_ids.
     * Use this to read the contents of cells in the notebook.
     *
     * @generated from protobuf rpc: GetCells
     */
    getCells(input: GetCellRequest, options?: RpcOptions): UnaryCall<GetCellRequest, GetCellResponse>;
    /**
     * ListCells lists the cells in a notebook.
     * Important: Only the ref_id and metadata will be populated. You should use that to decide
     * which cells to read.
     *
     * @generated from protobuf rpc: ListCells
     */
    listCells(input: ListCellsRequest, options?: RpcOptions): UnaryCall<ListCellsRequest, ListCellResponses>;
}
