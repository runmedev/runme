/* eslint-disable */
// @generated by protobuf-ts 2.11.1 with parameter output_javascript,optimize_code_size,long_type_string,add_pb_suffix,ts_nocheck,eslint_disable
// @generated from protobuf file "agent/v1/blocks.proto" (package "agent.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
/* eslint-disable */
// @generated by protobuf-ts 2.11.1 with parameter output_javascript,optimize_code_size,long_type_string,add_pb_suffix,ts_nocheck,eslint_disable
// @generated from protobuf file "agent/v1/blocks.proto" (package "agent.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { FileSearchResult } from "./filesearch_pb";
/**
 * @generated from protobuf enum agent.v1.BlockKind
 */
export var BlockKind;
(function (BlockKind) {
    /**
     * @generated from protobuf enum value: BLOCK_KIND_UNSPECIFIED = 0;
     */
    BlockKind[BlockKind["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from protobuf enum value: BLOCK_KIND_MARKUP = 1;
     */
    BlockKind[BlockKind["MARKUP"] = 1] = "MARKUP";
    /**
     * @generated from protobuf enum value: BLOCK_KIND_CODE = 2;
     */
    BlockKind[BlockKind["CODE"] = 2] = "CODE";
    /**
     * @generated from protobuf enum value: BLOCK_KIND_FILE_SEARCH_RESULTS = 3;
     */
    BlockKind[BlockKind["FILE_SEARCH_RESULTS"] = 3] = "FILE_SEARCH_RESULTS";
})(BlockKind || (BlockKind = {}));
/**
 * @generated from protobuf enum agent.v1.BlockRole
 */
export var BlockRole;
(function (BlockRole) {
    /**
     * @generated from protobuf enum value: BLOCK_ROLE_UNSPECIFIED = 0;
     */
    BlockRole[BlockRole["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from protobuf enum value: BLOCK_ROLE_USER = 1;
     */
    BlockRole[BlockRole["USER"] = 1] = "USER";
    /**
     * @generated from protobuf enum value: BLOCK_ROLE_ASSISTANT = 2;
     */
    BlockRole[BlockRole["ASSISTANT"] = 2] = "ASSISTANT";
})(BlockRole || (BlockRole = {}));
/**
 * @generated from protobuf enum agent.v1.BlockOutputKind
 */
export var BlockOutputKind;
(function (BlockOutputKind) {
    /**
     * @generated from protobuf enum value: BLOCK_OUTPUT_KIND_UNSPECIFIED = 0;
     */
    BlockOutputKind[BlockOutputKind["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from protobuf enum value: BLOCK_OUTPUT_KIND_STDOUT = 1;
     */
    BlockOutputKind[BlockOutputKind["STDOUT"] = 1] = "STDOUT";
    /**
     * @generated from protobuf enum value: BLOCK_OUTPUT_KIND_STDERR = 2;
     */
    BlockOutputKind[BlockOutputKind["STDERR"] = 2] = "STDERR";
})(BlockOutputKind || (BlockOutputKind = {}));
// @generated message type with reflection information, may provide speed optimized methods
class Block$Type extends MessageType {
    constructor() {
        super("agent.v1.Block", [
            { no: 1, name: "kind", kind: "enum", T: () => ["agent.v1.BlockKind", BlockKind, "BLOCK_KIND_"] },
            { no: 2, name: "language", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "contents", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "metadata", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 9, name: "role", kind: "enum", T: () => ["agent.v1.BlockRole", BlockRole, "BLOCK_ROLE_"] },
            { no: 10, name: "file_search_results", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => FileSearchResult },
            { no: 11, name: "outputs", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => BlockOutput },
            { no: 12, name: "call_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.kind = 0;
        message.language = "";
        message.contents = "";
        message.id = "";
        message.metadata = {};
        message.role = 0;
        message.fileSearchResults = [];
        message.outputs = [];
        message.callId = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* agent.v1.BlockKind kind */ 1:
                    message.kind = reader.int32();
                    break;
                case /* string language */ 2:
                    message.language = reader.string();
                    break;
                case /* string contents */ 3:
                    message.contents = reader.string();
                    break;
                case /* string id */ 7:
                    message.id = reader.string();
                    break;
                case /* map<string, string> metadata */ 8:
                    this.binaryReadMap8(message.metadata, reader, options);
                    break;
                case /* agent.v1.BlockRole role */ 9:
                    message.role = reader.int32();
                    break;
                case /* repeated agent.v1.FileSearchResult file_search_results */ 10:
                    message.fileSearchResults.push(FileSearchResult.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated agent.v1.BlockOutput outputs */ 11:
                    message.outputs.push(BlockOutput.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string call_id */ 12:
                    message.callId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap8(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for agent.v1.Block.metadata");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message, writer, options) {
        /* agent.v1.BlockKind kind = 1; */
        if (message.kind !== 0)
            writer.tag(1, WireType.Varint).int32(message.kind);
        /* string language = 2; */
        if (message.language !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.language);
        /* string contents = 3; */
        if (message.contents !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.contents);
        /* string id = 7; */
        if (message.id !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.id);
        /* map<string, string> metadata = 8; */
        for (let k of globalThis.Object.keys(message.metadata))
            writer.tag(8, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.metadata[k]).join();
        /* agent.v1.BlockRole role = 9; */
        if (message.role !== 0)
            writer.tag(9, WireType.Varint).int32(message.role);
        /* repeated agent.v1.FileSearchResult file_search_results = 10; */
        for (let i = 0; i < message.fileSearchResults.length; i++)
            FileSearchResult.internalBinaryWrite(message.fileSearchResults[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* repeated agent.v1.BlockOutput outputs = 11; */
        for (let i = 0; i < message.outputs.length; i++)
            BlockOutput.internalBinaryWrite(message.outputs[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* string call_id = 12; */
        if (message.callId !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.callId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message agent.v1.Block
 */
export const Block = new Block$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlockOutput$Type extends MessageType {
    constructor() {
        super("agent.v1.BlockOutput", [
            { no: 1, name: "items", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => BlockOutputItem },
            { no: 2, name: "kind", kind: "enum", T: () => ["agent.v1.BlockOutputKind", BlockOutputKind, "BLOCK_OUTPUT_KIND_"] }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.items = [];
        message.kind = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated agent.v1.BlockOutputItem items */ 1:
                    message.items.push(BlockOutputItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* agent.v1.BlockOutputKind kind */ 2:
                    message.kind = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated agent.v1.BlockOutputItem items = 1; */
        for (let i = 0; i < message.items.length; i++)
            BlockOutputItem.internalBinaryWrite(message.items[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* agent.v1.BlockOutputKind kind = 2; */
        if (message.kind !== 0)
            writer.tag(2, WireType.Varint).int32(message.kind);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message agent.v1.BlockOutput
 */
export const BlockOutput = new BlockOutput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlockOutputItem$Type extends MessageType {
    constructor() {
        super("agent.v1.BlockOutputItem", [
            { no: 1, name: "mime", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "text_data", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.mime = "";
        message.textData = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string mime */ 1:
                    message.mime = reader.string();
                    break;
                case /* string text_data */ 2:
                    message.textData = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string mime = 1; */
        if (message.mime !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.mime);
        /* string text_data = 2; */
        if (message.textData !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.textData);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message agent.v1.BlockOutputItem
 */
export const BlockOutputItem = new BlockOutputItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GenerateRequest$Type extends MessageType {
    constructor() {
        super("agent.v1.GenerateRequest", [
            { no: 1, name: "blocks", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Block },
            { no: 2, name: "previous_response_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "openai_access_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.blocks = [];
        message.previousResponseId = "";
        message.openaiAccessToken = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated agent.v1.Block blocks */ 1:
                    message.blocks.push(Block.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string previous_response_id */ 2:
                    message.previousResponseId = reader.string();
                    break;
                case /* string openai_access_token */ 3:
                    message.openaiAccessToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated agent.v1.Block blocks = 1; */
        for (let i = 0; i < message.blocks.length; i++)
            Block.internalBinaryWrite(message.blocks[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string previous_response_id = 2; */
        if (message.previousResponseId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.previousResponseId);
        /* string openai_access_token = 3; */
        if (message.openaiAccessToken !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.openaiAccessToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message agent.v1.GenerateRequest
 */
export const GenerateRequest = new GenerateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GenerateResponse$Type extends MessageType {
    constructor() {
        super("agent.v1.GenerateResponse", [
            { no: 1, name: "blocks", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Block },
            { no: 2, name: "response_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.blocks = [];
        message.responseId = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated agent.v1.Block blocks */ 1:
                    message.blocks.push(Block.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string response_id */ 2:
                    message.responseId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated agent.v1.Block blocks = 1; */
        for (let i = 0; i < message.blocks.length; i++)
            Block.internalBinaryWrite(message.blocks[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string response_id = 2; */
        if (message.responseId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.responseId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message agent.v1.GenerateResponse
 */
export const GenerateResponse = new GenerateResponse$Type();
/**
 * @generated ServiceType for protobuf service agent.v1.BlocksService
 */
export const BlocksService = new ServiceType("agent.v1.BlocksService", [
    { name: "Generate", serverStreaming: true, options: {}, I: GenerateRequest, O: GenerateResponse }
]);
