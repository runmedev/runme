// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: runme/reporter/v1alpha1/reporter.proto

package reporterv1alpha1

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"

	v1 "github.com/runmedev/runme/v3/pkg/api/gen/proto/go/runme/parser/v1"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TransformRequest struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Notebook      *v1.Notebook               `protobuf:"bytes,1,opt,name=notebook,proto3" json:"notebook,omitempty"`
	Extension     *TransformRequestExtension `protobuf:"bytes,2,opt,name=extension,proto3" json:"extension,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransformRequest) Reset() {
	*x = TransformRequest{}
	mi := &file_runme_reporter_v1alpha1_reporter_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransformRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformRequest) ProtoMessage() {}

func (x *TransformRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runme_reporter_v1alpha1_reporter_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformRequest.ProtoReflect.Descriptor instead.
func (*TransformRequest) Descriptor() ([]byte, []int) {
	return file_runme_reporter_v1alpha1_reporter_proto_rawDescGZIP(), []int{0}
}

func (x *TransformRequest) GetNotebook() *v1.Notebook {
	if x != nil {
		return x.Notebook
	}
	return nil
}

func (x *TransformRequest) GetExtension() *TransformRequestExtension {
	if x != nil {
		return x.Extension
	}
	return nil
}

type TransformRequestExtension struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	AutoSave       *bool                  `protobuf:"varint,2,opt,name=auto_save,json=autoSave,proto3,oneof" json:"auto_save,omitempty"`
	Repository     *string                `protobuf:"bytes,3,opt,name=repository,proto3,oneof" json:"repository,omitempty"`
	Branch         *string                `protobuf:"bytes,4,opt,name=branch,proto3,oneof" json:"branch,omitempty"`
	Commit         *string                `protobuf:"bytes,5,opt,name=commit,proto3,oneof" json:"commit,omitempty"`
	FilePath       *string                `protobuf:"bytes,6,opt,name=file_path,json=filePath,proto3,oneof" json:"file_path,omitempty"`
	FileContent    []byte                 `protobuf:"bytes,7,opt,name=file_content,json=fileContent,proto3,oneof" json:"file_content,omitempty"`
	PlainOutput    []byte                 `protobuf:"bytes,8,opt,name=plain_output,json=plainOutput,proto3,oneof" json:"plain_output,omitempty"`
	MaskedOutput   []byte                 `protobuf:"bytes,9,opt,name=masked_output,json=maskedOutput,proto3,oneof" json:"masked_output,omitempty"`
	MacAddress     *string                `protobuf:"bytes,10,opt,name=mac_address,json=macAddress,proto3,oneof" json:"mac_address,omitempty"`
	Hostname       *string                `protobuf:"bytes,11,opt,name=hostname,proto3,oneof" json:"hostname,omitempty"`
	Platform       *string                `protobuf:"bytes,12,opt,name=platform,proto3,oneof" json:"platform,omitempty"`
	Release        *string                `protobuf:"bytes,13,opt,name=release,proto3,oneof" json:"release,omitempty"`
	Arch           *string                `protobuf:"bytes,14,opt,name=arch,proto3,oneof" json:"arch,omitempty"`
	Vendor         *string                `protobuf:"bytes,15,opt,name=vendor,proto3,oneof" json:"vendor,omitempty"`
	Shell          *string                `protobuf:"bytes,16,opt,name=shell,proto3,oneof" json:"shell,omitempty"`
	VsAppHost      *string                `protobuf:"bytes,17,opt,name=vs_app_host,json=vsAppHost,proto3,oneof" json:"vs_app_host,omitempty"`
	VsAppName      *string                `protobuf:"bytes,18,opt,name=vs_app_name,json=vsAppName,proto3,oneof" json:"vs_app_name,omitempty"`
	VsAppSessionId *string                `protobuf:"bytes,19,opt,name=vs_app_session_id,json=vsAppSessionId,proto3,oneof" json:"vs_app_session_id,omitempty"`
	VsMachineId    *string                `protobuf:"bytes,20,opt,name=vs_machine_id,json=vsMachineId,proto3,oneof" json:"vs_machine_id,omitempty"`
	VsMetadata     map[string]string      `protobuf:"bytes,21,rep,name=vs_metadata,json=vsMetadata,proto3" json:"vs_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TransformRequestExtension) Reset() {
	*x = TransformRequestExtension{}
	mi := &file_runme_reporter_v1alpha1_reporter_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransformRequestExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformRequestExtension) ProtoMessage() {}

func (x *TransformRequestExtension) ProtoReflect() protoreflect.Message {
	mi := &file_runme_reporter_v1alpha1_reporter_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformRequestExtension.ProtoReflect.Descriptor instead.
func (*TransformRequestExtension) Descriptor() ([]byte, []int) {
	return file_runme_reporter_v1alpha1_reporter_proto_rawDescGZIP(), []int{1}
}

func (x *TransformRequestExtension) GetAutoSave() bool {
	if x != nil && x.AutoSave != nil {
		return *x.AutoSave
	}
	return false
}

func (x *TransformRequestExtension) GetRepository() string {
	if x != nil && x.Repository != nil {
		return *x.Repository
	}
	return ""
}

func (x *TransformRequestExtension) GetBranch() string {
	if x != nil && x.Branch != nil {
		return *x.Branch
	}
	return ""
}

func (x *TransformRequestExtension) GetCommit() string {
	if x != nil && x.Commit != nil {
		return *x.Commit
	}
	return ""
}

func (x *TransformRequestExtension) GetFilePath() string {
	if x != nil && x.FilePath != nil {
		return *x.FilePath
	}
	return ""
}

func (x *TransformRequestExtension) GetFileContent() []byte {
	if x != nil {
		return x.FileContent
	}
	return nil
}

func (x *TransformRequestExtension) GetPlainOutput() []byte {
	if x != nil {
		return x.PlainOutput
	}
	return nil
}

func (x *TransformRequestExtension) GetMaskedOutput() []byte {
	if x != nil {
		return x.MaskedOutput
	}
	return nil
}

func (x *TransformRequestExtension) GetMacAddress() string {
	if x != nil && x.MacAddress != nil {
		return *x.MacAddress
	}
	return ""
}

func (x *TransformRequestExtension) GetHostname() string {
	if x != nil && x.Hostname != nil {
		return *x.Hostname
	}
	return ""
}

func (x *TransformRequestExtension) GetPlatform() string {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return ""
}

func (x *TransformRequestExtension) GetRelease() string {
	if x != nil && x.Release != nil {
		return *x.Release
	}
	return ""
}

func (x *TransformRequestExtension) GetArch() string {
	if x != nil && x.Arch != nil {
		return *x.Arch
	}
	return ""
}

func (x *TransformRequestExtension) GetVendor() string {
	if x != nil && x.Vendor != nil {
		return *x.Vendor
	}
	return ""
}

func (x *TransformRequestExtension) GetShell() string {
	if x != nil && x.Shell != nil {
		return *x.Shell
	}
	return ""
}

func (x *TransformRequestExtension) GetVsAppHost() string {
	if x != nil && x.VsAppHost != nil {
		return *x.VsAppHost
	}
	return ""
}

func (x *TransformRequestExtension) GetVsAppName() string {
	if x != nil && x.VsAppName != nil {
		return *x.VsAppName
	}
	return ""
}

func (x *TransformRequestExtension) GetVsAppSessionId() string {
	if x != nil && x.VsAppSessionId != nil {
		return *x.VsAppSessionId
	}
	return ""
}

func (x *TransformRequestExtension) GetVsMachineId() string {
	if x != nil && x.VsMachineId != nil {
		return *x.VsMachineId
	}
	return ""
}

func (x *TransformRequestExtension) GetVsMetadata() map[string]string {
	if x != nil {
		return x.VsMetadata
	}
	return nil
}

type TransformResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Notebook      *v1.Notebook           `protobuf:"bytes,1,opt,name=notebook,proto3" json:"notebook,omitempty"`
	Extension     *ReporterExtension     `protobuf:"bytes,2,opt,name=extension,proto3" json:"extension,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransformResponse) Reset() {
	*x = TransformResponse{}
	mi := &file_runme_reporter_v1alpha1_reporter_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransformResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformResponse) ProtoMessage() {}

func (x *TransformResponse) ProtoReflect() protoreflect.Message {
	mi := &file_runme_reporter_v1alpha1_reporter_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformResponse.ProtoReflect.Descriptor instead.
func (*TransformResponse) Descriptor() ([]byte, []int) {
	return file_runme_reporter_v1alpha1_reporter_proto_rawDescGZIP(), []int{2}
}

func (x *TransformResponse) GetNotebook() *v1.Notebook {
	if x != nil {
		return x.Notebook
	}
	return nil
}

func (x *TransformResponse) GetExtension() *ReporterExtension {
	if x != nil {
		return x.Extension
	}
	return nil
}

type ReporterExtension struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AutoSave      bool                   `protobuf:"varint,1,opt,name=auto_save,json=autoSave,proto3" json:"auto_save,omitempty"`
	Git           *ReporterGit           `protobuf:"bytes,2,opt,name=git,proto3" json:"git,omitempty"`
	File          *ReporterFile          `protobuf:"bytes,3,opt,name=file,proto3" json:"file,omitempty"`
	Session       *ReporterSession       `protobuf:"bytes,4,opt,name=session,proto3" json:"session,omitempty"`
	Device        *ReporterDevice        `protobuf:"bytes,5,opt,name=device,proto3" json:"device,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReporterExtension) Reset() {
	*x = ReporterExtension{}
	mi := &file_runme_reporter_v1alpha1_reporter_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReporterExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReporterExtension) ProtoMessage() {}

func (x *ReporterExtension) ProtoReflect() protoreflect.Message {
	mi := &file_runme_reporter_v1alpha1_reporter_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReporterExtension.ProtoReflect.Descriptor instead.
func (*ReporterExtension) Descriptor() ([]byte, []int) {
	return file_runme_reporter_v1alpha1_reporter_proto_rawDescGZIP(), []int{3}
}

func (x *ReporterExtension) GetAutoSave() bool {
	if x != nil {
		return x.AutoSave
	}
	return false
}

func (x *ReporterExtension) GetGit() *ReporterGit {
	if x != nil {
		return x.Git
	}
	return nil
}

func (x *ReporterExtension) GetFile() *ReporterFile {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *ReporterExtension) GetSession() *ReporterSession {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *ReporterExtension) GetDevice() *ReporterDevice {
	if x != nil {
		return x.Device
	}
	return nil
}

type ReporterGit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Repository    string                 `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	Branch        string                 `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
	Commit        string                 `protobuf:"bytes,3,opt,name=commit,proto3" json:"commit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReporterGit) Reset() {
	*x = ReporterGit{}
	mi := &file_runme_reporter_v1alpha1_reporter_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReporterGit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReporterGit) ProtoMessage() {}

func (x *ReporterGit) ProtoReflect() protoreflect.Message {
	mi := &file_runme_reporter_v1alpha1_reporter_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReporterGit.ProtoReflect.Descriptor instead.
func (*ReporterGit) Descriptor() ([]byte, []int) {
	return file_runme_reporter_v1alpha1_reporter_proto_rawDescGZIP(), []int{4}
}

func (x *ReporterGit) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *ReporterGit) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *ReporterGit) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

type ReporterSession struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlainOutput   []byte                 `protobuf:"bytes,1,opt,name=plain_output,json=plainOutput,proto3" json:"plain_output,omitempty"`
	MaskedOutput  []byte                 `protobuf:"bytes,2,opt,name=masked_output,json=maskedOutput,proto3" json:"masked_output,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReporterSession) Reset() {
	*x = ReporterSession{}
	mi := &file_runme_reporter_v1alpha1_reporter_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReporterSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReporterSession) ProtoMessage() {}

func (x *ReporterSession) ProtoReflect() protoreflect.Message {
	mi := &file_runme_reporter_v1alpha1_reporter_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReporterSession.ProtoReflect.Descriptor instead.
func (*ReporterSession) Descriptor() ([]byte, []int) {
	return file_runme_reporter_v1alpha1_reporter_proto_rawDescGZIP(), []int{5}
}

func (x *ReporterSession) GetPlainOutput() []byte {
	if x != nil {
		return x.PlainOutput
	}
	return nil
}

func (x *ReporterSession) GetMaskedOutput() []byte {
	if x != nil {
		return x.MaskedOutput
	}
	return nil
}

type ReporterFile struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Content       []byte                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReporterFile) Reset() {
	*x = ReporterFile{}
	mi := &file_runme_reporter_v1alpha1_reporter_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReporterFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReporterFile) ProtoMessage() {}

func (x *ReporterFile) ProtoReflect() protoreflect.Message {
	mi := &file_runme_reporter_v1alpha1_reporter_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReporterFile.ProtoReflect.Descriptor instead.
func (*ReporterFile) Descriptor() ([]byte, []int) {
	return file_runme_reporter_v1alpha1_reporter_proto_rawDescGZIP(), []int{6}
}

func (x *ReporterFile) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ReporterFile) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type ReporterDevice struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	MacAddress     string                 `protobuf:"bytes,1,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	Hostname       string                 `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Platform       string                 `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"`
	Release        string                 `protobuf:"bytes,4,opt,name=release,proto3" json:"release,omitempty"`
	Arch           string                 `protobuf:"bytes,5,opt,name=arch,proto3" json:"arch,omitempty"`
	Vendor         string                 `protobuf:"bytes,6,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Shell          string                 `protobuf:"bytes,7,opt,name=shell,proto3" json:"shell,omitempty"`
	VsAppHost      string                 `protobuf:"bytes,8,opt,name=vs_app_host,json=vsAppHost,proto3" json:"vs_app_host,omitempty"`
	VsAppName      string                 `protobuf:"bytes,9,opt,name=vs_app_name,json=vsAppName,proto3" json:"vs_app_name,omitempty"`
	VsAppSessionId string                 `protobuf:"bytes,10,opt,name=vs_app_session_id,json=vsAppSessionId,proto3" json:"vs_app_session_id,omitempty"`
	VsMachineId    string                 `protobuf:"bytes,11,opt,name=vs_machine_id,json=vsMachineId,proto3" json:"vs_machine_id,omitempty"`
	VsMetadata     map[string]string      `protobuf:"bytes,12,rep,name=vs_metadata,json=vsMetadata,proto3" json:"vs_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ReporterDevice) Reset() {
	*x = ReporterDevice{}
	mi := &file_runme_reporter_v1alpha1_reporter_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReporterDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReporterDevice) ProtoMessage() {}

func (x *ReporterDevice) ProtoReflect() protoreflect.Message {
	mi := &file_runme_reporter_v1alpha1_reporter_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReporterDevice.ProtoReflect.Descriptor instead.
func (*ReporterDevice) Descriptor() ([]byte, []int) {
	return file_runme_reporter_v1alpha1_reporter_proto_rawDescGZIP(), []int{7}
}

func (x *ReporterDevice) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *ReporterDevice) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *ReporterDevice) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *ReporterDevice) GetRelease() string {
	if x != nil {
		return x.Release
	}
	return ""
}

func (x *ReporterDevice) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

func (x *ReporterDevice) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *ReporterDevice) GetShell() string {
	if x != nil {
		return x.Shell
	}
	return ""
}

func (x *ReporterDevice) GetVsAppHost() string {
	if x != nil {
		return x.VsAppHost
	}
	return ""
}

func (x *ReporterDevice) GetVsAppName() string {
	if x != nil {
		return x.VsAppName
	}
	return ""
}

func (x *ReporterDevice) GetVsAppSessionId() string {
	if x != nil {
		return x.VsAppSessionId
	}
	return ""
}

func (x *ReporterDevice) GetVsMachineId() string {
	if x != nil {
		return x.VsMachineId
	}
	return ""
}

func (x *ReporterDevice) GetVsMetadata() map[string]string {
	if x != nil {
		return x.VsMetadata
	}
	return nil
}

var File_runme_reporter_v1alpha1_reporter_proto protoreflect.FileDescriptor

const file_runme_reporter_v1alpha1_reporter_proto_rawDesc = "" +
	"\n" +
	"&runme/reporter/v1alpha1/reporter.proto\x12\x17runme.reporter.v1alpha1\x1a\x1crunme/parser/v1/parser.proto\"\x9b\x01\n" +
	"\x10TransformRequest\x125\n" +
	"\bnotebook\x18\x01 \x01(\v2\x19.runme.parser.v1.NotebookR\bnotebook\x12P\n" +
	"\textension\x18\x02 \x01(\v22.runme.reporter.v1alpha1.TransformRequestExtensionR\textension\"\xe8\b\n" +
	"\x19TransformRequestExtension\x12 \n" +
	"\tauto_save\x18\x02 \x01(\bH\x00R\bautoSave\x88\x01\x01\x12#\n" +
	"\n" +
	"repository\x18\x03 \x01(\tH\x01R\n" +
	"repository\x88\x01\x01\x12\x1b\n" +
	"\x06branch\x18\x04 \x01(\tH\x02R\x06branch\x88\x01\x01\x12\x1b\n" +
	"\x06commit\x18\x05 \x01(\tH\x03R\x06commit\x88\x01\x01\x12 \n" +
	"\tfile_path\x18\x06 \x01(\tH\x04R\bfilePath\x88\x01\x01\x12&\n" +
	"\ffile_content\x18\a \x01(\fH\x05R\vfileContent\x88\x01\x01\x12&\n" +
	"\fplain_output\x18\b \x01(\fH\x06R\vplainOutput\x88\x01\x01\x12(\n" +
	"\rmasked_output\x18\t \x01(\fH\aR\fmaskedOutput\x88\x01\x01\x12$\n" +
	"\vmac_address\x18\n" +
	" \x01(\tH\bR\n" +
	"macAddress\x88\x01\x01\x12\x1f\n" +
	"\bhostname\x18\v \x01(\tH\tR\bhostname\x88\x01\x01\x12\x1f\n" +
	"\bplatform\x18\f \x01(\tH\n" +
	"R\bplatform\x88\x01\x01\x12\x1d\n" +
	"\arelease\x18\r \x01(\tH\vR\arelease\x88\x01\x01\x12\x17\n" +
	"\x04arch\x18\x0e \x01(\tH\fR\x04arch\x88\x01\x01\x12\x1b\n" +
	"\x06vendor\x18\x0f \x01(\tH\rR\x06vendor\x88\x01\x01\x12\x19\n" +
	"\x05shell\x18\x10 \x01(\tH\x0eR\x05shell\x88\x01\x01\x12#\n" +
	"\vvs_app_host\x18\x11 \x01(\tH\x0fR\tvsAppHost\x88\x01\x01\x12#\n" +
	"\vvs_app_name\x18\x12 \x01(\tH\x10R\tvsAppName\x88\x01\x01\x12.\n" +
	"\x11vs_app_session_id\x18\x13 \x01(\tH\x11R\x0evsAppSessionId\x88\x01\x01\x12'\n" +
	"\rvs_machine_id\x18\x14 \x01(\tH\x12R\vvsMachineId\x88\x01\x01\x12c\n" +
	"\vvs_metadata\x18\x15 \x03(\v2B.runme.reporter.v1alpha1.TransformRequestExtension.VsMetadataEntryR\n" +
	"vsMetadata\x1a=\n" +
	"\x0fVsMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\f\n" +
	"\n" +
	"_auto_saveB\r\n" +
	"\v_repositoryB\t\n" +
	"\a_branchB\t\n" +
	"\a_commitB\f\n" +
	"\n" +
	"_file_pathB\x0f\n" +
	"\r_file_contentB\x0f\n" +
	"\r_plain_outputB\x10\n" +
	"\x0e_masked_outputB\x0e\n" +
	"\f_mac_addressB\v\n" +
	"\t_hostnameB\v\n" +
	"\t_platformB\n" +
	"\n" +
	"\b_releaseB\a\n" +
	"\x05_archB\t\n" +
	"\a_vendorB\b\n" +
	"\x06_shellB\x0e\n" +
	"\f_vs_app_hostB\x0e\n" +
	"\f_vs_app_nameB\x14\n" +
	"\x12_vs_app_session_idB\x10\n" +
	"\x0e_vs_machine_id\"\x94\x01\n" +
	"\x11TransformResponse\x125\n" +
	"\bnotebook\x18\x01 \x01(\v2\x19.runme.parser.v1.NotebookR\bnotebook\x12H\n" +
	"\textension\x18\x02 \x01(\v2*.runme.reporter.v1alpha1.ReporterExtensionR\textension\"\xa8\x02\n" +
	"\x11ReporterExtension\x12\x1b\n" +
	"\tauto_save\x18\x01 \x01(\bR\bautoSave\x126\n" +
	"\x03git\x18\x02 \x01(\v2$.runme.reporter.v1alpha1.ReporterGitR\x03git\x129\n" +
	"\x04file\x18\x03 \x01(\v2%.runme.reporter.v1alpha1.ReporterFileR\x04file\x12B\n" +
	"\asession\x18\x04 \x01(\v2(.runme.reporter.v1alpha1.ReporterSessionR\asession\x12?\n" +
	"\x06device\x18\x05 \x01(\v2'.runme.reporter.v1alpha1.ReporterDeviceR\x06device\"]\n" +
	"\vReporterGit\x12\x1e\n" +
	"\n" +
	"repository\x18\x01 \x01(\tR\n" +
	"repository\x12\x16\n" +
	"\x06branch\x18\x02 \x01(\tR\x06branch\x12\x16\n" +
	"\x06commit\x18\x03 \x01(\tR\x06commit\"Y\n" +
	"\x0fReporterSession\x12!\n" +
	"\fplain_output\x18\x01 \x01(\fR\vplainOutput\x12#\n" +
	"\rmasked_output\x18\x02 \x01(\fR\fmaskedOutput\"<\n" +
	"\fReporterFile\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x18\n" +
	"\acontent\x18\x02 \x01(\fR\acontent\"\xed\x03\n" +
	"\x0eReporterDevice\x12\x1f\n" +
	"\vmac_address\x18\x01 \x01(\tR\n" +
	"macAddress\x12\x1a\n" +
	"\bhostname\x18\x02 \x01(\tR\bhostname\x12\x1a\n" +
	"\bplatform\x18\x03 \x01(\tR\bplatform\x12\x18\n" +
	"\arelease\x18\x04 \x01(\tR\arelease\x12\x12\n" +
	"\x04arch\x18\x05 \x01(\tR\x04arch\x12\x16\n" +
	"\x06vendor\x18\x06 \x01(\tR\x06vendor\x12\x14\n" +
	"\x05shell\x18\a \x01(\tR\x05shell\x12\x1e\n" +
	"\vvs_app_host\x18\b \x01(\tR\tvsAppHost\x12\x1e\n" +
	"\vvs_app_name\x18\t \x01(\tR\tvsAppName\x12)\n" +
	"\x11vs_app_session_id\x18\n" +
	" \x01(\tR\x0evsAppSessionId\x12\"\n" +
	"\rvs_machine_id\x18\v \x01(\tR\vvsMachineId\x12X\n" +
	"\vvs_metadata\x18\f \x03(\v27.runme.reporter.v1alpha1.ReporterDevice.VsMetadataEntryR\n" +
	"vsMetadata\x1a=\n" +
	"\x0fVsMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x012u\n" +
	"\x0fReporterService\x12b\n" +
	"\tTransform\x12).runme.reporter.v1alpha1.TransformRequest\x1a*.runme.reporter.v1alpha1.TransformResponseB\\ZZgithub.com/runmedev/runme/v3/pkg/api/gen/proto/go/runme/reporter/v1alpha1;reporterv1alpha1b\x06proto3"

var (
	file_runme_reporter_v1alpha1_reporter_proto_rawDescOnce sync.Once
	file_runme_reporter_v1alpha1_reporter_proto_rawDescData []byte
)

func file_runme_reporter_v1alpha1_reporter_proto_rawDescGZIP() []byte {
	file_runme_reporter_v1alpha1_reporter_proto_rawDescOnce.Do(func() {
		file_runme_reporter_v1alpha1_reporter_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_runme_reporter_v1alpha1_reporter_proto_rawDesc), len(file_runme_reporter_v1alpha1_reporter_proto_rawDesc)))
	})
	return file_runme_reporter_v1alpha1_reporter_proto_rawDescData
}

var file_runme_reporter_v1alpha1_reporter_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_runme_reporter_v1alpha1_reporter_proto_goTypes = []any{
	(*TransformRequest)(nil),          // 0: runme.reporter.v1alpha1.TransformRequest
	(*TransformRequestExtension)(nil), // 1: runme.reporter.v1alpha1.TransformRequestExtension
	(*TransformResponse)(nil),         // 2: runme.reporter.v1alpha1.TransformResponse
	(*ReporterExtension)(nil),         // 3: runme.reporter.v1alpha1.ReporterExtension
	(*ReporterGit)(nil),               // 4: runme.reporter.v1alpha1.ReporterGit
	(*ReporterSession)(nil),           // 5: runme.reporter.v1alpha1.ReporterSession
	(*ReporterFile)(nil),              // 6: runme.reporter.v1alpha1.ReporterFile
	(*ReporterDevice)(nil),            // 7: runme.reporter.v1alpha1.ReporterDevice
	nil,                               // 8: runme.reporter.v1alpha1.TransformRequestExtension.VsMetadataEntry
	nil,                               // 9: runme.reporter.v1alpha1.ReporterDevice.VsMetadataEntry
	(*v1.Notebook)(nil),               // 10: runme.parser.v1.Notebook
}
var file_runme_reporter_v1alpha1_reporter_proto_depIdxs = []int32{
	10, // 0: runme.reporter.v1alpha1.TransformRequest.notebook:type_name -> runme.parser.v1.Notebook
	1,  // 1: runme.reporter.v1alpha1.TransformRequest.extension:type_name -> runme.reporter.v1alpha1.TransformRequestExtension
	8,  // 2: runme.reporter.v1alpha1.TransformRequestExtension.vs_metadata:type_name -> runme.reporter.v1alpha1.TransformRequestExtension.VsMetadataEntry
	10, // 3: runme.reporter.v1alpha1.TransformResponse.notebook:type_name -> runme.parser.v1.Notebook
	3,  // 4: runme.reporter.v1alpha1.TransformResponse.extension:type_name -> runme.reporter.v1alpha1.ReporterExtension
	4,  // 5: runme.reporter.v1alpha1.ReporterExtension.git:type_name -> runme.reporter.v1alpha1.ReporterGit
	6,  // 6: runme.reporter.v1alpha1.ReporterExtension.file:type_name -> runme.reporter.v1alpha1.ReporterFile
	5,  // 7: runme.reporter.v1alpha1.ReporterExtension.session:type_name -> runme.reporter.v1alpha1.ReporterSession
	7,  // 8: runme.reporter.v1alpha1.ReporterExtension.device:type_name -> runme.reporter.v1alpha1.ReporterDevice
	9,  // 9: runme.reporter.v1alpha1.ReporterDevice.vs_metadata:type_name -> runme.reporter.v1alpha1.ReporterDevice.VsMetadataEntry
	0,  // 10: runme.reporter.v1alpha1.ReporterService.Transform:input_type -> runme.reporter.v1alpha1.TransformRequest
	2,  // 11: runme.reporter.v1alpha1.ReporterService.Transform:output_type -> runme.reporter.v1alpha1.TransformResponse
	11, // [11:12] is the sub-list for method output_type
	10, // [10:11] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_runme_reporter_v1alpha1_reporter_proto_init() }
func file_runme_reporter_v1alpha1_reporter_proto_init() {
	if File_runme_reporter_v1alpha1_reporter_proto != nil {
		return
	}
	file_runme_reporter_v1alpha1_reporter_proto_msgTypes[1].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_runme_reporter_v1alpha1_reporter_proto_rawDesc), len(file_runme_reporter_v1alpha1_reporter_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_runme_reporter_v1alpha1_reporter_proto_goTypes,
		DependencyIndexes: file_runme_reporter_v1alpha1_reporter_proto_depIdxs,
		MessageInfos:      file_runme_reporter_v1alpha1_reporter_proto_msgTypes,
	}.Build()
	File_runme_reporter_v1alpha1_reporter_proto = out.File
	file_runme_reporter_v1alpha1_reporter_proto_goTypes = nil
	file_runme_reporter_v1alpha1_reporter_proto_depIdxs = nil
}
