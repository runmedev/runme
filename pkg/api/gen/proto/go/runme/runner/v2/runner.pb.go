// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: runme/runner/v2/runner.proto

package runnerv2

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// env store implementation
type SessionEnvStoreType int32

const (
	// uses default env store
	SessionEnvStoreType_SESSION_ENV_STORE_TYPE_UNSPECIFIED SessionEnvStoreType = 0
	// uses owl store
	SessionEnvStoreType_SESSION_ENV_STORE_TYPE_OWL SessionEnvStoreType = 1
)

// Enum value maps for SessionEnvStoreType.
var (
	SessionEnvStoreType_name = map[int32]string{
		0: "SESSION_ENV_STORE_TYPE_UNSPECIFIED",
		1: "SESSION_ENV_STORE_TYPE_OWL",
	}
	SessionEnvStoreType_value = map[string]int32{
		"SESSION_ENV_STORE_TYPE_UNSPECIFIED": 0,
		"SESSION_ENV_STORE_TYPE_OWL":         1,
	}
)

func (x SessionEnvStoreType) Enum() *SessionEnvStoreType {
	p := new(SessionEnvStoreType)
	*p = x
	return p
}

func (x SessionEnvStoreType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionEnvStoreType) Descriptor() protoreflect.EnumDescriptor {
	return file_runme_runner_v2_runner_proto_enumTypes[0].Descriptor()
}

func (SessionEnvStoreType) Type() protoreflect.EnumType {
	return &file_runme_runner_v2_runner_proto_enumTypes[0]
}

func (x SessionEnvStoreType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionEnvStoreType.Descriptor instead.
func (SessionEnvStoreType) EnumDescriptor() ([]byte, []int) {
	return file_runme_runner_v2_runner_proto_rawDescGZIP(), []int{0}
}

type ExecuteStop int32

const (
	ExecuteStop_EXECUTE_STOP_UNSPECIFIED ExecuteStop = 0
	ExecuteStop_EXECUTE_STOP_INTERRUPT   ExecuteStop = 1
	ExecuteStop_EXECUTE_STOP_KILL        ExecuteStop = 2
)

// Enum value maps for ExecuteStop.
var (
	ExecuteStop_name = map[int32]string{
		0: "EXECUTE_STOP_UNSPECIFIED",
		1: "EXECUTE_STOP_INTERRUPT",
		2: "EXECUTE_STOP_KILL",
	}
	ExecuteStop_value = map[string]int32{
		"EXECUTE_STOP_UNSPECIFIED": 0,
		"EXECUTE_STOP_INTERRUPT":   1,
		"EXECUTE_STOP_KILL":        2,
	}
)

func (x ExecuteStop) Enum() *ExecuteStop {
	p := new(ExecuteStop)
	*p = x
	return p
}

func (x ExecuteStop) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecuteStop) Descriptor() protoreflect.EnumDescriptor {
	return file_runme_runner_v2_runner_proto_enumTypes[1].Descriptor()
}

func (ExecuteStop) Type() protoreflect.EnumType {
	return &file_runme_runner_v2_runner_proto_enumTypes[1]
}

func (x ExecuteStop) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecuteStop.Descriptor instead.
func (ExecuteStop) EnumDescriptor() ([]byte, []int) {
	return file_runme_runner_v2_runner_proto_rawDescGZIP(), []int{1}
}

// SessionStrategy determines a session selection in
// an initial execute request.
type SessionStrategy int32

const (
	// Uses the session_id field to determine the session.
	// If none is present, a new session is created.
	SessionStrategy_SESSION_STRATEGY_UNSPECIFIED SessionStrategy = 0
	// Uses the most recent session on the server.
	// If there is none, a new one is created.
	SessionStrategy_SESSION_STRATEGY_MOST_RECENT SessionStrategy = 1
)

// Enum value maps for SessionStrategy.
var (
	SessionStrategy_name = map[int32]string{
		0: "SESSION_STRATEGY_UNSPECIFIED",
		1: "SESSION_STRATEGY_MOST_RECENT",
	}
	SessionStrategy_value = map[string]int32{
		"SESSION_STRATEGY_UNSPECIFIED": 0,
		"SESSION_STRATEGY_MOST_RECENT": 1,
	}
)

func (x SessionStrategy) Enum() *SessionStrategy {
	p := new(SessionStrategy)
	*p = x
	return p
}

func (x SessionStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_runme_runner_v2_runner_proto_enumTypes[2].Descriptor()
}

func (SessionStrategy) Type() protoreflect.EnumType {
	return &file_runme_runner_v2_runner_proto_enumTypes[2]
}

func (x SessionStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionStrategy.Descriptor instead.
func (SessionStrategy) EnumDescriptor() ([]byte, []int) {
	return file_runme_runner_v2_runner_proto_rawDescGZIP(), []int{2}
}

type MonitorEnvStoreType int32

const (
	MonitorEnvStoreType_MONITOR_ENV_STORE_TYPE_UNSPECIFIED MonitorEnvStoreType = 0
	MonitorEnvStoreType_MONITOR_ENV_STORE_TYPE_SNAPSHOT    MonitorEnvStoreType = 1
)

// Enum value maps for MonitorEnvStoreType.
var (
	MonitorEnvStoreType_name = map[int32]string{
		0: "MONITOR_ENV_STORE_TYPE_UNSPECIFIED",
		1: "MONITOR_ENV_STORE_TYPE_SNAPSHOT",
	}
	MonitorEnvStoreType_value = map[string]int32{
		"MONITOR_ENV_STORE_TYPE_UNSPECIFIED": 0,
		"MONITOR_ENV_STORE_TYPE_SNAPSHOT":    1,
	}
)

func (x MonitorEnvStoreType) Enum() *MonitorEnvStoreType {
	p := new(MonitorEnvStoreType)
	*p = x
	return p
}

func (x MonitorEnvStoreType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MonitorEnvStoreType) Descriptor() protoreflect.EnumDescriptor {
	return file_runme_runner_v2_runner_proto_enumTypes[3].Descriptor()
}

func (MonitorEnvStoreType) Type() protoreflect.EnumType {
	return &file_runme_runner_v2_runner_proto_enumTypes[3]
}

func (x MonitorEnvStoreType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MonitorEnvStoreType.Descriptor instead.
func (MonitorEnvStoreType) EnumDescriptor() ([]byte, []int) {
	return file_runme_runner_v2_runner_proto_rawDescGZIP(), []int{3}
}

type CreateSessionRequest_Config_SessionEnvStoreSeeding int32

const (
	// default seeding; ignore system
	CreateSessionRequest_Config_SESSION_ENV_STORE_SEEDING_UNSPECIFIED CreateSessionRequest_Config_SessionEnvStoreSeeding = 0
	// enable seeding from system
	CreateSessionRequest_Config_SESSION_ENV_STORE_SEEDING_SYSTEM CreateSessionRequest_Config_SessionEnvStoreSeeding = 1
)

// Enum value maps for CreateSessionRequest_Config_SessionEnvStoreSeeding.
var (
	CreateSessionRequest_Config_SessionEnvStoreSeeding_name = map[int32]string{
		0: "SESSION_ENV_STORE_SEEDING_UNSPECIFIED",
		1: "SESSION_ENV_STORE_SEEDING_SYSTEM",
	}
	CreateSessionRequest_Config_SessionEnvStoreSeeding_value = map[string]int32{
		"SESSION_ENV_STORE_SEEDING_UNSPECIFIED": 0,
		"SESSION_ENV_STORE_SEEDING_SYSTEM":      1,
	}
)

func (x CreateSessionRequest_Config_SessionEnvStoreSeeding) Enum() *CreateSessionRequest_Config_SessionEnvStoreSeeding {
	p := new(CreateSessionRequest_Config_SessionEnvStoreSeeding)
	*p = x
	return p
}

func (x CreateSessionRequest_Config_SessionEnvStoreSeeding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateSessionRequest_Config_SessionEnvStoreSeeding) Descriptor() protoreflect.EnumDescriptor {
	return file_runme_runner_v2_runner_proto_enumTypes[4].Descriptor()
}

func (CreateSessionRequest_Config_SessionEnvStoreSeeding) Type() protoreflect.EnumType {
	return &file_runme_runner_v2_runner_proto_enumTypes[4]
}

func (x CreateSessionRequest_Config_SessionEnvStoreSeeding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateSessionRequest_Config_SessionEnvStoreSeeding.Descriptor instead.
func (CreateSessionRequest_Config_SessionEnvStoreSeeding) EnumDescriptor() ([]byte, []int) {
	return file_runme_runner_v2_runner_proto_rawDescGZIP(), []int{2, 1, 0}
}

type ResolveProgramRequest_Mode int32

const (
	// unspecified is auto (default) which prompts for all
	// unresolved environment variables.
	// Subsequent runs will likely resolve via the session.
	ResolveProgramRequest_MODE_UNSPECIFIED ResolveProgramRequest_Mode = 0
	// prompt always means to prompt for all environment variables.
	ResolveProgramRequest_MODE_PROMPT_ALL ResolveProgramRequest_Mode = 1
	// skip means to not prompt for any environment variables.
	// All variables will be marked as resolved.
	ResolveProgramRequest_MODE_SKIP_ALL ResolveProgramRequest_Mode = 2
)

// Enum value maps for ResolveProgramRequest_Mode.
var (
	ResolveProgramRequest_Mode_name = map[int32]string{
		0: "MODE_UNSPECIFIED",
		1: "MODE_PROMPT_ALL",
		2: "MODE_SKIP_ALL",
	}
	ResolveProgramRequest_Mode_value = map[string]int32{
		"MODE_UNSPECIFIED": 0,
		"MODE_PROMPT_ALL":  1,
		"MODE_SKIP_ALL":    2,
	}
)

func (x ResolveProgramRequest_Mode) Enum() *ResolveProgramRequest_Mode {
	p := new(ResolveProgramRequest_Mode)
	*p = x
	return p
}

func (x ResolveProgramRequest_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResolveProgramRequest_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_runme_runner_v2_runner_proto_enumTypes[5].Descriptor()
}

func (ResolveProgramRequest_Mode) Type() protoreflect.EnumType {
	return &file_runme_runner_v2_runner_proto_enumTypes[5]
}

func (x ResolveProgramRequest_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResolveProgramRequest_Mode.Descriptor instead.
func (ResolveProgramRequest_Mode) EnumDescriptor() ([]byte, []int) {
	return file_runme_runner_v2_runner_proto_rawDescGZIP(), []int{16, 0}
}

type ResolveProgramRequest_Retention int32

const (
	ResolveProgramRequest_RETENTION_UNSPECIFIED ResolveProgramRequest_Retention = 0
	// first run means to always retain the first resolved value.
	ResolveProgramRequest_RETENTION_FIRST_RUN ResolveProgramRequest_Retention = 1
	// last run means to always retain the last resolved value.
	ResolveProgramRequest_RETENTION_LAST_RUN ResolveProgramRequest_Retention = 2
)

// Enum value maps for ResolveProgramRequest_Retention.
var (
	ResolveProgramRequest_Retention_name = map[int32]string{
		0: "RETENTION_UNSPECIFIED",
		1: "RETENTION_FIRST_RUN",
		2: "RETENTION_LAST_RUN",
	}
	ResolveProgramRequest_Retention_value = map[string]int32{
		"RETENTION_UNSPECIFIED": 0,
		"RETENTION_FIRST_RUN":   1,
		"RETENTION_LAST_RUN":    2,
	}
)

func (x ResolveProgramRequest_Retention) Enum() *ResolveProgramRequest_Retention {
	p := new(ResolveProgramRequest_Retention)
	*p = x
	return p
}

func (x ResolveProgramRequest_Retention) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResolveProgramRequest_Retention) Descriptor() protoreflect.EnumDescriptor {
	return file_runme_runner_v2_runner_proto_enumTypes[6].Descriptor()
}

func (ResolveProgramRequest_Retention) Type() protoreflect.EnumType {
	return &file_runme_runner_v2_runner_proto_enumTypes[6]
}

func (x ResolveProgramRequest_Retention) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResolveProgramRequest_Retention.Descriptor instead.
func (ResolveProgramRequest_Retention) EnumDescriptor() ([]byte, []int) {
	return file_runme_runner_v2_runner_proto_rawDescGZIP(), []int{16, 1}
}

type ResolveProgramResponse_Status int32

const (
	// unspecified is the default value and it means unresolved.
	ResolveProgramResponse_STATUS_UNSPECIFIED ResolveProgramResponse_Status = 0
	// resolved means that the variable is resolved.
	ResolveProgramResponse_STATUS_RESOLVED ResolveProgramResponse_Status = 1
	// unresolved with message means that the variable is unresolved
	// but it contains a message. E.g. FOO=this is message.
	ResolveProgramResponse_STATUS_UNRESOLVED_WITH_MESSAGE ResolveProgramResponse_Status = 2
	// unresolved with placeholder means that the variable is unresolved
	// but it contains a placeholder. E.g. FOO="this is placeholder".
	ResolveProgramResponse_STATUS_UNRESOLVED_WITH_PLACEHOLDER ResolveProgramResponse_Status = 3
	// unresolved with secret means that the variable is unresolved
	// and it requires treatment as a secret.
	ResolveProgramResponse_STATUS_UNRESOLVED_WITH_SECRET ResolveProgramResponse_Status = 4
)

// Enum value maps for ResolveProgramResponse_Status.
var (
	ResolveProgramResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_RESOLVED",
		2: "STATUS_UNRESOLVED_WITH_MESSAGE",
		3: "STATUS_UNRESOLVED_WITH_PLACEHOLDER",
		4: "STATUS_UNRESOLVED_WITH_SECRET",
	}
	ResolveProgramResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":                 0,
		"STATUS_RESOLVED":                    1,
		"STATUS_UNRESOLVED_WITH_MESSAGE":     2,
		"STATUS_UNRESOLVED_WITH_PLACEHOLDER": 3,
		"STATUS_UNRESOLVED_WITH_SECRET":      4,
	}
)

func (x ResolveProgramResponse_Status) Enum() *ResolveProgramResponse_Status {
	p := new(ResolveProgramResponse_Status)
	*p = x
	return p
}

func (x ResolveProgramResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResolveProgramResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_runme_runner_v2_runner_proto_enumTypes[7].Descriptor()
}

func (ResolveProgramResponse_Status) Type() protoreflect.EnumType {
	return &file_runme_runner_v2_runner_proto_enumTypes[7]
}

func (x ResolveProgramResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResolveProgramResponse_Status.Descriptor instead.
func (ResolveProgramResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_runme_runner_v2_runner_proto_rawDescGZIP(), []int{17, 0}
}

type MonitorEnvStoreResponseSnapshot_Status int32

const (
	MonitorEnvStoreResponseSnapshot_STATUS_UNSPECIFIED MonitorEnvStoreResponseSnapshot_Status = 0
	MonitorEnvStoreResponseSnapshot_STATUS_LITERAL     MonitorEnvStoreResponseSnapshot_Status = 1
	MonitorEnvStoreResponseSnapshot_STATUS_HIDDEN      MonitorEnvStoreResponseSnapshot_Status = 2
	MonitorEnvStoreResponseSnapshot_STATUS_MASKED      MonitorEnvStoreResponseSnapshot_Status = 3
)

// Enum value maps for MonitorEnvStoreResponseSnapshot_Status.
var (
	MonitorEnvStoreResponseSnapshot_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_LITERAL",
		2: "STATUS_HIDDEN",
		3: "STATUS_MASKED",
	}
	MonitorEnvStoreResponseSnapshot_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_LITERAL":     1,
		"STATUS_HIDDEN":      2,
		"STATUS_MASKED":      3,
	}
)

func (x MonitorEnvStoreResponseSnapshot_Status) Enum() *MonitorEnvStoreResponseSnapshot_Status {
	p := new(MonitorEnvStoreResponseSnapshot_Status)
	*p = x
	return p
}

func (x MonitorEnvStoreResponseSnapshot_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MonitorEnvStoreResponseSnapshot_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_runme_runner_v2_runner_proto_enumTypes[8].Descriptor()
}

func (MonitorEnvStoreResponseSnapshot_Status) Type() protoreflect.EnumType {
	return &file_runme_runner_v2_runner_proto_enumTypes[8]
}

func (x MonitorEnvStoreResponseSnapshot_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MonitorEnvStoreResponseSnapshot_Status.Descriptor instead.
func (MonitorEnvStoreResponseSnapshot_Status) EnumDescriptor() ([]byte, []int) {
	return file_runme_runner_v2_runner_proto_rawDescGZIP(), []int{19, 0}
}

type Project struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// root is a root directory of the project.
	// The semantic is the same as for the "--project"
	// flag in "runme".
	Root string `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	// env_load_order is list of environment files
	// to try and load env from.
	EnvLoadOrder  []string `protobuf:"bytes,2,rep,name=env_load_order,json=envLoadOrder,proto3" json:"env_load_order,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Project) Reset() {
	*x = Project{}
	mi := &file_runme_runner_v2_runner_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Project) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Project) ProtoMessage() {}

func (x *Project) ProtoReflect() protoreflect.Message {
	mi := &file_runme_runner_v2_runner_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Project.ProtoReflect.Descriptor instead.
func (*Project) Descriptor() ([]byte, []int) {
	return file_runme_runner_v2_runner_proto_rawDescGZIP(), []int{0}
}

func (x *Project) GetRoot() string {
	if x != nil {
		return x.Root
	}
	return ""
}

func (x *Project) GetEnvLoadOrder() []string {
	if x != nil {
		return x.EnvLoadOrder
	}
	return nil
}

type Session struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id    string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// env keeps track of session environment variables.
	// They can be modified by executing programs which
	// alter them through "export" and "unset" commands.
	Env []string `protobuf:"bytes,2,rep,name=env,proto3" json:"env,omitempty"`
	// metadata is a map of client specific metadata.
	Metadata      map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Session) Reset() {
	*x = Session{}
	mi := &file_runme_runner_v2_runner_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session) ProtoMessage() {}

func (x *Session) ProtoReflect() protoreflect.Message {
	mi := &file_runme_runner_v2_runner_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session.ProtoReflect.Descriptor instead.
func (*Session) Descriptor() ([]byte, []int) {
	return file_runme_runner_v2_runner_proto_rawDescGZIP(), []int{1}
}

func (x *Session) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Session) GetEnv() []string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *Session) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type CreateSessionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// metadata is a map of client specific metadata.
	Metadata map[string]string `protobuf:"bytes,1,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// env field provides an initial set of environment variables
	// for a newly created session.
	Env []string `protobuf:"bytes,2,rep,name=env,proto3" json:"env,omitempty"`
	// project from which to load environment variables.
	// They will be appended to the list from the env field.
	// The env field has a higher priority.
	Project *Project `protobuf:"bytes,3,opt,name=project,proto3,oneof" json:"project,omitempty"`
	// Deprecated use config instead. optional selection
	// of which env store implementation to use.
	EnvStoreType  *SessionEnvStoreType         `protobuf:"varint,4,opt,name=env_store_type,json=envStoreType,proto3,enum=runme.runner.v2.SessionEnvStoreType,oneof" json:"env_store_type,omitempty"`
	Config        *CreateSessionRequest_Config `protobuf:"bytes,5,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSessionRequest) Reset() {
	*x = CreateSessionRequest{}
	mi := &file_runme_runner_v2_runner_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionRequest) ProtoMessage() {}

func (x *CreateSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runme_runner_v2_runner_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionRequest.ProtoReflect.Descriptor instead.
func (*CreateSessionRequest) Descriptor() ([]byte, []int) {
	return file_runme_runner_v2_runner_proto_rawDescGZIP(), []int{2}
}

func (x *CreateSessionRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CreateSessionRequest) GetEnv() []string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *CreateSessionRequest) GetProject() *Project {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *CreateSessionRequest) GetEnvStoreType() SessionEnvStoreType {
	if x != nil && x.EnvStoreType != nil {
		return *x.EnvStoreType
	}
	return SessionEnvStoreType_SESSION_ENV_STORE_TYPE_UNSPECIFIED
}

func (x *CreateSessionRequest) GetConfig() *CreateSessionRequest_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

type CreateSessionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Session       *Session               `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSessionResponse) Reset() {
	*x = CreateSessionResponse{}
	mi := &file_runme_runner_v2_runner_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionResponse) ProtoMessage() {}

func (x *CreateSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_runme_runner_v2_runner_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionResponse.ProtoReflect.Descriptor instead.
func (*CreateSessionResponse) Descriptor() ([]byte, []int) {
	return file_runme_runner_v2_runner_proto_rawDescGZIP(), []int{3}
}

func (x *CreateSessionResponse) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

type GetSessionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSessionRequest) Reset() {
	*x = GetSessionRequest{}
	mi := &file_runme_runner_v2_runner_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSessionRequest) ProtoMessage() {}

func (x *GetSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runme_runner_v2_runner_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSessionRequest.ProtoReflect.Descriptor instead.
func (*GetSessionRequest) Descriptor() ([]byte, []int) {
	return file_runme_runner_v2_runner_proto_rawDescGZIP(), []int{4}
}

func (x *GetSessionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetSessionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Session       *Session               `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSessionResponse) Reset() {
	*x = GetSessionResponse{}
	mi := &file_runme_runner_v2_runner_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSessionResponse) ProtoMessage() {}

func (x *GetSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_runme_runner_v2_runner_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSessionResponse.ProtoReflect.Descriptor instead.
func (*GetSessionResponse) Descriptor() ([]byte, []int) {
	return file_runme_runner_v2_runner_proto_rawDescGZIP(), []int{5}
}

func (x *GetSessionResponse) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

type ListSessionsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSessionsRequest) Reset() {
	*x = ListSessionsRequest{}
	mi := &file_runme_runner_v2_runner_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSessionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSessionsRequest) ProtoMessage() {}

func (x *ListSessionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runme_runner_v2_runner_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSessionsRequest.ProtoReflect.Descriptor instead.
func (*ListSessionsRequest) Descriptor() ([]byte, []int) {
	return file_runme_runner_v2_runner_proto_rawDescGZIP(), []int{6}
}

type ListSessionsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sessions      []*Session             `protobuf:"bytes,1,rep,name=sessions,proto3" json:"sessions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSessionsResponse) Reset() {
	*x = ListSessionsResponse{}
	mi := &file_runme_runner_v2_runner_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSessionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSessionsResponse) ProtoMessage() {}

func (x *ListSessionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_runme_runner_v2_runner_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSessionsResponse.ProtoReflect.Descriptor instead.
func (*ListSessionsResponse) Descriptor() ([]byte, []int) {
	return file_runme_runner_v2_runner_proto_rawDescGZIP(), []int{7}
}

func (x *ListSessionsResponse) GetSessions() []*Session {
	if x != nil {
		return x.Sessions
	}
	return nil
}

type UpdateSessionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id    string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// metadata is a map of client specific metadata.
	Metadata map[string]string `protobuf:"bytes,2,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// env field provides an initial set of environment variables
	// for a newly created session.
	Env []string `protobuf:"bytes,3,rep,name=env,proto3" json:"env,omitempty"`
	// project from which to load environment variables.
	// They will be appended to the list from the env field.
	// The env field has a higher priority.
	Project       *Project `protobuf:"bytes,4,opt,name=project,proto3,oneof" json:"project,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSessionRequest) Reset() {
	*x = UpdateSessionRequest{}
	mi := &file_runme_runner_v2_runner_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSessionRequest) ProtoMessage() {}

func (x *UpdateSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runme_runner_v2_runner_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSessionRequest.ProtoReflect.Descriptor instead.
func (*UpdateSessionRequest) Descriptor() ([]byte, []int) {
	return file_runme_runner_v2_runner_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateSessionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateSessionRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UpdateSessionRequest) GetEnv() []string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *UpdateSessionRequest) GetProject() *Project {
	if x != nil {
		return x.Project
	}
	return nil
}

type UpdateSessionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Session       *Session               `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSessionResponse) Reset() {
	*x = UpdateSessionResponse{}
	mi := &file_runme_runner_v2_runner_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSessionResponse) ProtoMessage() {}

func (x *UpdateSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_runme_runner_v2_runner_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSessionResponse.ProtoReflect.Descriptor instead.
func (*UpdateSessionResponse) Descriptor() ([]byte, []int) {
	return file_runme_runner_v2_runner_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateSessionResponse) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

type DeleteSessionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSessionRequest) Reset() {
	*x = DeleteSessionRequest{}
	mi := &file_runme_runner_v2_runner_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSessionRequest) ProtoMessage() {}

func (x *DeleteSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runme_runner_v2_runner_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSessionRequest.ProtoReflect.Descriptor instead.
func (*DeleteSessionRequest) Descriptor() ([]byte, []int) {
	return file_runme_runner_v2_runner_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteSessionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteSessionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSessionResponse) Reset() {
	*x = DeleteSessionResponse{}
	mi := &file_runme_runner_v2_runner_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSessionResponse) ProtoMessage() {}

func (x *DeleteSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_runme_runner_v2_runner_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSessionResponse.ProtoReflect.Descriptor instead.
func (*DeleteSessionResponse) Descriptor() ([]byte, []int) {
	return file_runme_runner_v2_runner_proto_rawDescGZIP(), []int{11}
}

type Winsize struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rows          uint32                 `protobuf:"varint,1,opt,name=rows,proto3" json:"rows,omitempty"`
	Cols          uint32                 `protobuf:"varint,2,opt,name=cols,proto3" json:"cols,omitempty"`
	X             uint32                 `protobuf:"varint,3,opt,name=x,proto3" json:"x,omitempty"`
	Y             uint32                 `protobuf:"varint,4,opt,name=y,proto3" json:"y,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Winsize) Reset() {
	*x = Winsize{}
	mi := &file_runme_runner_v2_runner_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Winsize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Winsize) ProtoMessage() {}

func (x *Winsize) ProtoReflect() protoreflect.Message {
	mi := &file_runme_runner_v2_runner_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Winsize.ProtoReflect.Descriptor instead.
func (*Winsize) Descriptor() ([]byte, []int) {
	return file_runme_runner_v2_runner_proto_rawDescGZIP(), []int{12}
}

func (x *Winsize) GetRows() uint32 {
	if x != nil {
		return x.Rows
	}
	return 0
}

func (x *Winsize) GetCols() uint32 {
	if x != nil {
		return x.Cols
	}
	return 0
}

func (x *Winsize) GetX() uint32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Winsize) GetY() uint32 {
	if x != nil {
		return x.Y
	}
	return 0
}

type ExecuteRequest struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Config *ProgramConfig         `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// input_data is a byte array that will be send as input
	// to the program.
	InputData []byte `protobuf:"bytes,8,opt,name=input_data,json=inputData,proto3" json:"input_data,omitempty"`
	// stop requests the running process to be stopped.
	// It is allowed only in the consecutive calls.
	Stop ExecuteStop `protobuf:"varint,9,opt,name=stop,proto3,enum=runme.runner.v2.ExecuteStop" json:"stop,omitempty"`
	// sets pty winsize
	// has no effect in non-interactive mode
	Winsize *Winsize `protobuf:"bytes,10,opt,name=winsize,proto3,oneof" json:"winsize,omitempty"`
	// session_id indicates in which Session the program should execute.
	// Executing in a Session might provide additional context like
	// environment variables.
	SessionId string `protobuf:"bytes,20,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// session_strategy is a strategy for selecting the session.
	SessionStrategy SessionStrategy `protobuf:"varint,21,opt,name=session_strategy,json=sessionStrategy,proto3,enum=runme.runner.v2.SessionStrategy" json:"session_strategy,omitempty"`
	// project used to load environment variables from .env files.
	Project *Project `protobuf:"bytes,22,opt,name=project,proto3,oneof" json:"project,omitempty"`
	// store_stdout_in_env, if true, will store the stdout under well known name
	// and the last ran block in the environment variable `__`.
	StoreStdoutInEnv bool `protobuf:"varint,23,opt,name=store_stdout_in_env,json=storeStdoutInEnv,proto3" json:"store_stdout_in_env,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ExecuteRequest) Reset() {
	*x = ExecuteRequest{}
	mi := &file_runme_runner_v2_runner_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteRequest) ProtoMessage() {}

func (x *ExecuteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runme_runner_v2_runner_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteRequest.ProtoReflect.Descriptor instead.
func (*ExecuteRequest) Descriptor() ([]byte, []int) {
	return file_runme_runner_v2_runner_proto_rawDescGZIP(), []int{13}
}

func (x *ExecuteRequest) GetConfig() *ProgramConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *ExecuteRequest) GetInputData() []byte {
	if x != nil {
		return x.InputData
	}
	return nil
}

func (x *ExecuteRequest) GetStop() ExecuteStop {
	if x != nil {
		return x.Stop
	}
	return ExecuteStop_EXECUTE_STOP_UNSPECIFIED
}

func (x *ExecuteRequest) GetWinsize() *Winsize {
	if x != nil {
		return x.Winsize
	}
	return nil
}

func (x *ExecuteRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ExecuteRequest) GetSessionStrategy() SessionStrategy {
	if x != nil {
		return x.SessionStrategy
	}
	return SessionStrategy_SESSION_STRATEGY_UNSPECIFIED
}

func (x *ExecuteRequest) GetProject() *Project {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *ExecuteRequest) GetStoreStdoutInEnv() bool {
	if x != nil {
		return x.StoreStdoutInEnv
	}
	return false
}

type ExecuteResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// exit_code is sent only in the final message.
	ExitCode *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	// stdout_data contains bytes from stdout since the last response.
	StdoutData []byte `protobuf:"bytes,2,opt,name=stdout_data,json=stdoutData,proto3" json:"stdout_data,omitempty"`
	// stderr_data contains bytes from stderr since the last response.
	StderrData []byte `protobuf:"bytes,3,opt,name=stderr_data,json=stderrData,proto3" json:"stderr_data,omitempty"`
	// pid contains the process' PID.
	//
	// This is only sent once in an initial response for background processes.
	Pid *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=pid,proto3" json:"pid,omitempty"`
	// mime_type is a detected MIME type of the stdout_data.
	//
	// This is only sent once in the first response containing stdout_data.
	MimeType      string `protobuf:"bytes,5,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecuteResponse) Reset() {
	*x = ExecuteResponse{}
	mi := &file_runme_runner_v2_runner_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteResponse) ProtoMessage() {}

func (x *ExecuteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_runme_runner_v2_runner_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteResponse.ProtoReflect.Descriptor instead.
func (*ExecuteResponse) Descriptor() ([]byte, []int) {
	return file_runme_runner_v2_runner_proto_rawDescGZIP(), []int{14}
}

func (x *ExecuteResponse) GetExitCode() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ExitCode
	}
	return nil
}

func (x *ExecuteResponse) GetStdoutData() []byte {
	if x != nil {
		return x.StdoutData
	}
	return nil
}

func (x *ExecuteResponse) GetStderrData() []byte {
	if x != nil {
		return x.StderrData
	}
	return nil
}

func (x *ExecuteResponse) GetPid() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Pid
	}
	return nil
}

func (x *ExecuteResponse) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

type ResolveProgramCommandList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// commands are commands to be executed by the program.
	// The commands are joined and executed as a script.
	// For example: ["echo 'Hello, World'", "ls -l /etc"].
	Lines         []string `protobuf:"bytes,1,rep,name=lines,proto3" json:"lines,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResolveProgramCommandList) Reset() {
	*x = ResolveProgramCommandList{}
	mi := &file_runme_runner_v2_runner_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolveProgramCommandList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveProgramCommandList) ProtoMessage() {}

func (x *ResolveProgramCommandList) ProtoReflect() protoreflect.Message {
	mi := &file_runme_runner_v2_runner_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveProgramCommandList.ProtoReflect.Descriptor instead.
func (*ResolveProgramCommandList) Descriptor() ([]byte, []int) {
	return file_runme_runner_v2_runner_proto_rawDescGZIP(), []int{15}
}

func (x *ResolveProgramCommandList) GetLines() []string {
	if x != nil {
		return x.Lines
	}
	return nil
}

type ResolveProgramRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// use script for unnormalized cell content
	// whereas commands is for normalized shell commands
	//
	// Types that are valid to be assigned to Source:
	//
	//	*ResolveProgramRequest_Commands
	//	*ResolveProgramRequest_Script
	Source isResolveProgramRequest_Source `protobuf_oneof:"source"`
	// mode determines how variables resolution occurs.
	// It is usually based on document or cell annotation config.
	Mode ResolveProgramRequest_Mode `protobuf:"varint,3,opt,name=mode,proto3,enum=runme.runner.v2.ResolveProgramRequest_Mode" json:"mode,omitempty"`
	// env is a list of explicit environment variables that will be used
	// to resolve the environment variables found in the source.
	Env []string `protobuf:"bytes,4,rep,name=env,proto3" json:"env,omitempty"`
	// session_id indicates which session is the source of
	// environment variables. If not provided, the most recent
	// session can be used using session_strategy.
	SessionId string `protobuf:"bytes,5,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// session_strategy is a strategy for selecting the session.
	SessionStrategy SessionStrategy `protobuf:"varint,6,opt,name=session_strategy,json=sessionStrategy,proto3,enum=runme.runner.v2.SessionStrategy" json:"session_strategy,omitempty"`
	// project used to load environment variables from .env files.
	Project *Project `protobuf:"bytes,7,opt,name=project,proto3,oneof" json:"project,omitempty"`
	// language id associated with script.
	LanguageId string `protobuf:"bytes,8,opt,name=language_id,json=languageId,proto3" json:"language_id,omitempty"`
	// retention determines how variables are retained once resolved.
	Retention     ResolveProgramRequest_Retention `protobuf:"varint,9,opt,name=retention,proto3,enum=runme.runner.v2.ResolveProgramRequest_Retention" json:"retention,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResolveProgramRequest) Reset() {
	*x = ResolveProgramRequest{}
	mi := &file_runme_runner_v2_runner_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolveProgramRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveProgramRequest) ProtoMessage() {}

func (x *ResolveProgramRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runme_runner_v2_runner_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveProgramRequest.ProtoReflect.Descriptor instead.
func (*ResolveProgramRequest) Descriptor() ([]byte, []int) {
	return file_runme_runner_v2_runner_proto_rawDescGZIP(), []int{16}
}

func (x *ResolveProgramRequest) GetSource() isResolveProgramRequest_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *ResolveProgramRequest) GetCommands() *ResolveProgramCommandList {
	if x != nil {
		if x, ok := x.Source.(*ResolveProgramRequest_Commands); ok {
			return x.Commands
		}
	}
	return nil
}

func (x *ResolveProgramRequest) GetScript() string {
	if x != nil {
		if x, ok := x.Source.(*ResolveProgramRequest_Script); ok {
			return x.Script
		}
	}
	return ""
}

func (x *ResolveProgramRequest) GetMode() ResolveProgramRequest_Mode {
	if x != nil {
		return x.Mode
	}
	return ResolveProgramRequest_MODE_UNSPECIFIED
}

func (x *ResolveProgramRequest) GetEnv() []string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *ResolveProgramRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ResolveProgramRequest) GetSessionStrategy() SessionStrategy {
	if x != nil {
		return x.SessionStrategy
	}
	return SessionStrategy_SESSION_STRATEGY_UNSPECIFIED
}

func (x *ResolveProgramRequest) GetProject() *Project {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *ResolveProgramRequest) GetLanguageId() string {
	if x != nil {
		return x.LanguageId
	}
	return ""
}

func (x *ResolveProgramRequest) GetRetention() ResolveProgramRequest_Retention {
	if x != nil {
		return x.Retention
	}
	return ResolveProgramRequest_RETENTION_UNSPECIFIED
}

type isResolveProgramRequest_Source interface {
	isResolveProgramRequest_Source()
}

type ResolveProgramRequest_Commands struct {
	// commands are commands to be executed by the program.
	// The commands are joined and executed as a script.
	Commands *ResolveProgramCommandList `protobuf:"bytes,1,opt,name=commands,proto3,oneof"`
}

type ResolveProgramRequest_Script struct {
	// script is code to be executed by the program.
	// Individual lines are joined with the new line character.
	Script string `protobuf:"bytes,2,opt,name=script,proto3,oneof"`
}

func (*ResolveProgramRequest_Commands) isResolveProgramRequest_Source() {}

func (*ResolveProgramRequest_Script) isResolveProgramRequest_Source() {}

type ResolveProgramResponse struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Script string                 `protobuf:"bytes,1,opt,name=script,proto3" json:"script,omitempty"`
	// use script until commands normalization is implemented
	Commands      *ResolveProgramCommandList          `protobuf:"bytes,2,opt,name=commands,proto3" json:"commands,omitempty"`
	Vars          []*ResolveProgramResponse_VarResult `protobuf:"bytes,3,rep,name=vars,proto3" json:"vars,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResolveProgramResponse) Reset() {
	*x = ResolveProgramResponse{}
	mi := &file_runme_runner_v2_runner_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolveProgramResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveProgramResponse) ProtoMessage() {}

func (x *ResolveProgramResponse) ProtoReflect() protoreflect.Message {
	mi := &file_runme_runner_v2_runner_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveProgramResponse.ProtoReflect.Descriptor instead.
func (*ResolveProgramResponse) Descriptor() ([]byte, []int) {
	return file_runme_runner_v2_runner_proto_rawDescGZIP(), []int{17}
}

func (x *ResolveProgramResponse) GetScript() string {
	if x != nil {
		return x.Script
	}
	return ""
}

func (x *ResolveProgramResponse) GetCommands() *ResolveProgramCommandList {
	if x != nil {
		return x.Commands
	}
	return nil
}

func (x *ResolveProgramResponse) GetVars() []*ResolveProgramResponse_VarResult {
	if x != nil {
		return x.Vars
	}
	return nil
}

type MonitorEnvStoreRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Session       *Session               `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MonitorEnvStoreRequest) Reset() {
	*x = MonitorEnvStoreRequest{}
	mi := &file_runme_runner_v2_runner_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MonitorEnvStoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorEnvStoreRequest) ProtoMessage() {}

func (x *MonitorEnvStoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runme_runner_v2_runner_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorEnvStoreRequest.ProtoReflect.Descriptor instead.
func (*MonitorEnvStoreRequest) Descriptor() ([]byte, []int) {
	return file_runme_runner_v2_runner_proto_rawDescGZIP(), []int{18}
}

func (x *MonitorEnvStoreRequest) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

type MonitorEnvStoreResponseSnapshot struct {
	state         protoimpl.MessageState                         `protogen:"open.v1"`
	Envs          []*MonitorEnvStoreResponseSnapshot_SnapshotEnv `protobuf:"bytes,1,rep,name=envs,proto3" json:"envs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MonitorEnvStoreResponseSnapshot) Reset() {
	*x = MonitorEnvStoreResponseSnapshot{}
	mi := &file_runme_runner_v2_runner_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MonitorEnvStoreResponseSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorEnvStoreResponseSnapshot) ProtoMessage() {}

func (x *MonitorEnvStoreResponseSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_runme_runner_v2_runner_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorEnvStoreResponseSnapshot.ProtoReflect.Descriptor instead.
func (*MonitorEnvStoreResponseSnapshot) Descriptor() ([]byte, []int) {
	return file_runme_runner_v2_runner_proto_rawDescGZIP(), []int{19}
}

func (x *MonitorEnvStoreResponseSnapshot) GetEnvs() []*MonitorEnvStoreResponseSnapshot_SnapshotEnv {
	if x != nil {
		return x.Envs
	}
	return nil
}

type MonitorEnvStoreResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Type  MonitorEnvStoreType    `protobuf:"varint,1,opt,name=type,proto3,enum=runme.runner.v2.MonitorEnvStoreType" json:"type,omitempty"`
	// Types that are valid to be assigned to Data:
	//
	//	*MonitorEnvStoreResponse_Snapshot
	Data          isMonitorEnvStoreResponse_Data `protobuf_oneof:"data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MonitorEnvStoreResponse) Reset() {
	*x = MonitorEnvStoreResponse{}
	mi := &file_runme_runner_v2_runner_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MonitorEnvStoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorEnvStoreResponse) ProtoMessage() {}

func (x *MonitorEnvStoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_runme_runner_v2_runner_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorEnvStoreResponse.ProtoReflect.Descriptor instead.
func (*MonitorEnvStoreResponse) Descriptor() ([]byte, []int) {
	return file_runme_runner_v2_runner_proto_rawDescGZIP(), []int{20}
}

func (x *MonitorEnvStoreResponse) GetType() MonitorEnvStoreType {
	if x != nil {
		return x.Type
	}
	return MonitorEnvStoreType_MONITOR_ENV_STORE_TYPE_UNSPECIFIED
}

func (x *MonitorEnvStoreResponse) GetData() isMonitorEnvStoreResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *MonitorEnvStoreResponse) GetSnapshot() *MonitorEnvStoreResponseSnapshot {
	if x != nil {
		if x, ok := x.Data.(*MonitorEnvStoreResponse_Snapshot); ok {
			return x.Snapshot
		}
	}
	return nil
}

type isMonitorEnvStoreResponse_Data interface {
	isMonitorEnvStoreResponse_Data()
}

type MonitorEnvStoreResponse_Snapshot struct {
	Snapshot *MonitorEnvStoreResponseSnapshot `protobuf:"bytes,2,opt,name=snapshot,proto3,oneof"`
}

func (*MonitorEnvStoreResponse_Snapshot) isMonitorEnvStoreResponse_Data() {}

type CreateSessionRequest_Config struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// optional selection of which env store implementation to use.
	EnvStoreType *SessionEnvStoreType `protobuf:"varint,1,opt,name=env_store_type,json=envStoreType,proto3,enum=runme.runner.v2.SessionEnvStoreType,oneof" json:"env_store_type,omitempty"`
	// how to seed initial ENV
	EnvStoreSeeding *CreateSessionRequest_Config_SessionEnvStoreSeeding `protobuf:"varint,2,opt,name=env_store_seeding,json=envStoreSeeding,proto3,enum=runme.runner.v2.CreateSessionRequest_Config_SessionEnvStoreSeeding,oneof" json:"env_store_seeding,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CreateSessionRequest_Config) Reset() {
	*x = CreateSessionRequest_Config{}
	mi := &file_runme_runner_v2_runner_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSessionRequest_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionRequest_Config) ProtoMessage() {}

func (x *CreateSessionRequest_Config) ProtoReflect() protoreflect.Message {
	mi := &file_runme_runner_v2_runner_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionRequest_Config.ProtoReflect.Descriptor instead.
func (*CreateSessionRequest_Config) Descriptor() ([]byte, []int) {
	return file_runme_runner_v2_runner_proto_rawDescGZIP(), []int{2, 1}
}

func (x *CreateSessionRequest_Config) GetEnvStoreType() SessionEnvStoreType {
	if x != nil && x.EnvStoreType != nil {
		return *x.EnvStoreType
	}
	return SessionEnvStoreType_SESSION_ENV_STORE_TYPE_UNSPECIFIED
}

func (x *CreateSessionRequest_Config) GetEnvStoreSeeding() CreateSessionRequest_Config_SessionEnvStoreSeeding {
	if x != nil && x.EnvStoreSeeding != nil {
		return *x.EnvStoreSeeding
	}
	return CreateSessionRequest_Config_SESSION_ENV_STORE_SEEDING_UNSPECIFIED
}

type ResolveProgramResponse_VarResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// prompt indicates the resolution status of the env variable.
	Status ResolveProgramResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=runme.runner.v2.ResolveProgramResponse_Status" json:"status,omitempty"`
	// name is the name of the environment variable.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// original_value is a default value of the environment variable.
	// It might be a value that is assigned to the variable in the script,
	// like FOO=bar or FOO=${FOO:-bar}.
	// If the variable is not assigned, it is an empty string.
	OriginalValue string `protobuf:"bytes,3,opt,name=original_value,json=originalValue,proto3" json:"original_value,omitempty"`
	// resolved_value is a value of the environment variable resolved from a source.
	// If it is an empty string, it means that the environment variable is not resolved.
	ResolvedValue string `protobuf:"bytes,4,opt,name=resolved_value,json=resolvedValue,proto3" json:"resolved_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResolveProgramResponse_VarResult) Reset() {
	*x = ResolveProgramResponse_VarResult{}
	mi := &file_runme_runner_v2_runner_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolveProgramResponse_VarResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveProgramResponse_VarResult) ProtoMessage() {}

func (x *ResolveProgramResponse_VarResult) ProtoReflect() protoreflect.Message {
	mi := &file_runme_runner_v2_runner_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveProgramResponse_VarResult.ProtoReflect.Descriptor instead.
func (*ResolveProgramResponse_VarResult) Descriptor() ([]byte, []int) {
	return file_runme_runner_v2_runner_proto_rawDescGZIP(), []int{17, 0}
}

func (x *ResolveProgramResponse_VarResult) GetStatus() ResolveProgramResponse_Status {
	if x != nil {
		return x.Status
	}
	return ResolveProgramResponse_STATUS_UNSPECIFIED
}

func (x *ResolveProgramResponse_VarResult) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResolveProgramResponse_VarResult) GetOriginalValue() string {
	if x != nil {
		return x.OriginalValue
	}
	return ""
}

func (x *ResolveProgramResponse_VarResult) GetResolvedValue() string {
	if x != nil {
		return x.ResolvedValue
	}
	return ""
}

type MonitorEnvStoreResponseSnapshot_SnapshotEnv struct {
	state         protoimpl.MessageState                   `protogen:"open.v1"`
	Status        MonitorEnvStoreResponseSnapshot_Status   `protobuf:"varint,1,opt,name=status,proto3,enum=runme.runner.v2.MonitorEnvStoreResponseSnapshot_Status" json:"status,omitempty"`
	Name          string                                   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                                   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Spec          string                                   `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	IsRequired    bool                                     `protobuf:"varint,5,opt,name=is_required,json=isRequired,proto3" json:"is_required,omitempty"`
	Origin        string                                   `protobuf:"bytes,6,opt,name=origin,proto3" json:"origin,omitempty"`
	OriginalValue string                                   `protobuf:"bytes,7,opt,name=original_value,json=originalValue,proto3" json:"original_value,omitempty"`
	ResolvedValue string                                   `protobuf:"bytes,8,opt,name=resolved_value,json=resolvedValue,proto3" json:"resolved_value,omitempty"`
	CreateTime    string                                   `protobuf:"bytes,9,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime    string                                   `protobuf:"bytes,10,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Errors        []*MonitorEnvStoreResponseSnapshot_Error `protobuf:"bytes,11,rep,name=errors,proto3" json:"errors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MonitorEnvStoreResponseSnapshot_SnapshotEnv) Reset() {
	*x = MonitorEnvStoreResponseSnapshot_SnapshotEnv{}
	mi := &file_runme_runner_v2_runner_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MonitorEnvStoreResponseSnapshot_SnapshotEnv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorEnvStoreResponseSnapshot_SnapshotEnv) ProtoMessage() {}

func (x *MonitorEnvStoreResponseSnapshot_SnapshotEnv) ProtoReflect() protoreflect.Message {
	mi := &file_runme_runner_v2_runner_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorEnvStoreResponseSnapshot_SnapshotEnv.ProtoReflect.Descriptor instead.
func (*MonitorEnvStoreResponseSnapshot_SnapshotEnv) Descriptor() ([]byte, []int) {
	return file_runme_runner_v2_runner_proto_rawDescGZIP(), []int{19, 0}
}

func (x *MonitorEnvStoreResponseSnapshot_SnapshotEnv) GetStatus() MonitorEnvStoreResponseSnapshot_Status {
	if x != nil {
		return x.Status
	}
	return MonitorEnvStoreResponseSnapshot_STATUS_UNSPECIFIED
}

func (x *MonitorEnvStoreResponseSnapshot_SnapshotEnv) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MonitorEnvStoreResponseSnapshot_SnapshotEnv) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MonitorEnvStoreResponseSnapshot_SnapshotEnv) GetSpec() string {
	if x != nil {
		return x.Spec
	}
	return ""
}

func (x *MonitorEnvStoreResponseSnapshot_SnapshotEnv) GetIsRequired() bool {
	if x != nil {
		return x.IsRequired
	}
	return false
}

func (x *MonitorEnvStoreResponseSnapshot_SnapshotEnv) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *MonitorEnvStoreResponseSnapshot_SnapshotEnv) GetOriginalValue() string {
	if x != nil {
		return x.OriginalValue
	}
	return ""
}

func (x *MonitorEnvStoreResponseSnapshot_SnapshotEnv) GetResolvedValue() string {
	if x != nil {
		return x.ResolvedValue
	}
	return ""
}

func (x *MonitorEnvStoreResponseSnapshot_SnapshotEnv) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *MonitorEnvStoreResponseSnapshot_SnapshotEnv) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *MonitorEnvStoreResponseSnapshot_SnapshotEnv) GetErrors() []*MonitorEnvStoreResponseSnapshot_Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type MonitorEnvStoreResponseSnapshot_Error struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          uint32                 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MonitorEnvStoreResponseSnapshot_Error) Reset() {
	*x = MonitorEnvStoreResponseSnapshot_Error{}
	mi := &file_runme_runner_v2_runner_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MonitorEnvStoreResponseSnapshot_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorEnvStoreResponseSnapshot_Error) ProtoMessage() {}

func (x *MonitorEnvStoreResponseSnapshot_Error) ProtoReflect() protoreflect.Message {
	mi := &file_runme_runner_v2_runner_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorEnvStoreResponseSnapshot_Error.ProtoReflect.Descriptor instead.
func (*MonitorEnvStoreResponseSnapshot_Error) Descriptor() ([]byte, []int) {
	return file_runme_runner_v2_runner_proto_rawDescGZIP(), []int{19, 1}
}

func (x *MonitorEnvStoreResponseSnapshot_Error) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *MonitorEnvStoreResponseSnapshot_Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_runme_runner_v2_runner_proto protoreflect.FileDescriptor

const file_runme_runner_v2_runner_proto_rawDesc = "" +
	"\n" +
	"\x1crunme/runner/v2/runner.proto\x12\x0frunme.runner.v2\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x1crunme/runner/v2/config.proto\"C\n" +
	"\aProject\x12\x12\n" +
	"\x04root\x18\x01 \x01(\tR\x04root\x12$\n" +
	"\x0eenv_load_order\x18\x02 \x03(\tR\fenvLoadOrder\"\xac\x01\n" +
	"\aSession\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x10\n" +
	"\x03env\x18\x02 \x03(\tR\x03env\x12B\n" +
	"\bmetadata\x18\x03 \x03(\v2&.runme.runner.v2.Session.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x8b\x06\n" +
	"\x14CreateSessionRequest\x12O\n" +
	"\bmetadata\x18\x01 \x03(\v23.runme.runner.v2.CreateSessionRequest.MetadataEntryR\bmetadata\x12\x10\n" +
	"\x03env\x18\x02 \x03(\tR\x03env\x127\n" +
	"\aproject\x18\x03 \x01(\v2\x18.runme.runner.v2.ProjectH\x00R\aproject\x88\x01\x01\x12O\n" +
	"\x0eenv_store_type\x18\x04 \x01(\x0e2$.runme.runner.v2.SessionEnvStoreTypeH\x01R\fenvStoreType\x88\x01\x01\x12D\n" +
	"\x06config\x18\x05 \x01(\v2,.runme.runner.v2.CreateSessionRequest.ConfigR\x06config\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a\xe3\x02\n" +
	"\x06Config\x12O\n" +
	"\x0eenv_store_type\x18\x01 \x01(\x0e2$.runme.runner.v2.SessionEnvStoreTypeH\x00R\fenvStoreType\x88\x01\x01\x12t\n" +
	"\x11env_store_seeding\x18\x02 \x01(\x0e2C.runme.runner.v2.CreateSessionRequest.Config.SessionEnvStoreSeedingH\x01R\x0fenvStoreSeeding\x88\x01\x01\"i\n" +
	"\x16SessionEnvStoreSeeding\x12)\n" +
	"%SESSION_ENV_STORE_SEEDING_UNSPECIFIED\x10\x00\x12$\n" +
	" SESSION_ENV_STORE_SEEDING_SYSTEM\x10\x01B\x11\n" +
	"\x0f_env_store_typeB\x14\n" +
	"\x12_env_store_seedingB\n" +
	"\n" +
	"\b_projectB\x11\n" +
	"\x0f_env_store_type\"K\n" +
	"\x15CreateSessionResponse\x122\n" +
	"\asession\x18\x01 \x01(\v2\x18.runme.runner.v2.SessionR\asession\"#\n" +
	"\x11GetSessionRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"H\n" +
	"\x12GetSessionResponse\x122\n" +
	"\asession\x18\x01 \x01(\v2\x18.runme.runner.v2.SessionR\asession\"\x15\n" +
	"\x13ListSessionsRequest\"L\n" +
	"\x14ListSessionsResponse\x124\n" +
	"\bsessions\x18\x01 \x03(\v2\x18.runme.runner.v2.SessionR\bsessions\"\x8b\x02\n" +
	"\x14UpdateSessionRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12O\n" +
	"\bmetadata\x18\x02 \x03(\v23.runme.runner.v2.UpdateSessionRequest.MetadataEntryR\bmetadata\x12\x10\n" +
	"\x03env\x18\x03 \x03(\tR\x03env\x127\n" +
	"\aproject\x18\x04 \x01(\v2\x18.runme.runner.v2.ProjectH\x00R\aproject\x88\x01\x01\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\n" +
	"\n" +
	"\b_project\"K\n" +
	"\x15UpdateSessionResponse\x122\n" +
	"\asession\x18\x01 \x01(\v2\x18.runme.runner.v2.SessionR\asession\"&\n" +
	"\x14DeleteSessionRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"\x17\n" +
	"\x15DeleteSessionResponse\"M\n" +
	"\aWinsize\x12\x12\n" +
	"\x04rows\x18\x01 \x01(\rR\x04rows\x12\x12\n" +
	"\x04cols\x18\x02 \x01(\rR\x04cols\x12\f\n" +
	"\x01x\x18\x03 \x01(\rR\x01x\x12\f\n" +
	"\x01y\x18\x04 \x01(\rR\x01y\"\xbe\x03\n" +
	"\x0eExecuteRequest\x126\n" +
	"\x06config\x18\x01 \x01(\v2\x1e.runme.runner.v2.ProgramConfigR\x06config\x12\x1d\n" +
	"\n" +
	"input_data\x18\b \x01(\fR\tinputData\x120\n" +
	"\x04stop\x18\t \x01(\x0e2\x1c.runme.runner.v2.ExecuteStopR\x04stop\x127\n" +
	"\awinsize\x18\n" +
	" \x01(\v2\x18.runme.runner.v2.WinsizeH\x00R\awinsize\x88\x01\x01\x12\x1d\n" +
	"\n" +
	"session_id\x18\x14 \x01(\tR\tsessionId\x12K\n" +
	"\x10session_strategy\x18\x15 \x01(\x0e2 .runme.runner.v2.SessionStrategyR\x0fsessionStrategy\x127\n" +
	"\aproject\x18\x16 \x01(\v2\x18.runme.runner.v2.ProjectH\x01R\aproject\x88\x01\x01\x12-\n" +
	"\x13store_stdout_in_env\x18\x17 \x01(\bR\x10storeStdoutInEnvB\n" +
	"\n" +
	"\b_winsizeB\n" +
	"\n" +
	"\b_project\"\xdb\x01\n" +
	"\x0fExecuteResponse\x129\n" +
	"\texit_code\x18\x01 \x01(\v2\x1c.google.protobuf.UInt32ValueR\bexitCode\x12\x1f\n" +
	"\vstdout_data\x18\x02 \x01(\fR\n" +
	"stdoutData\x12\x1f\n" +
	"\vstderr_data\x18\x03 \x01(\fR\n" +
	"stderrData\x12.\n" +
	"\x03pid\x18\x04 \x01(\v2\x1c.google.protobuf.UInt32ValueR\x03pid\x12\x1b\n" +
	"\tmime_type\x18\x05 \x01(\tR\bmimeType\"1\n" +
	"\x19ResolveProgramCommandList\x12\x14\n" +
	"\x05lines\x18\x01 \x03(\tR\x05lines\"\x99\x05\n" +
	"\x15ResolveProgramRequest\x12H\n" +
	"\bcommands\x18\x01 \x01(\v2*.runme.runner.v2.ResolveProgramCommandListH\x00R\bcommands\x12\x18\n" +
	"\x06script\x18\x02 \x01(\tH\x00R\x06script\x12?\n" +
	"\x04mode\x18\x03 \x01(\x0e2+.runme.runner.v2.ResolveProgramRequest.ModeR\x04mode\x12\x10\n" +
	"\x03env\x18\x04 \x03(\tR\x03env\x12\x1d\n" +
	"\n" +
	"session_id\x18\x05 \x01(\tR\tsessionId\x12K\n" +
	"\x10session_strategy\x18\x06 \x01(\x0e2 .runme.runner.v2.SessionStrategyR\x0fsessionStrategy\x127\n" +
	"\aproject\x18\a \x01(\v2\x18.runme.runner.v2.ProjectH\x01R\aproject\x88\x01\x01\x12\x1f\n" +
	"\vlanguage_id\x18\b \x01(\tR\n" +
	"languageId\x12N\n" +
	"\tretention\x18\t \x01(\x0e20.runme.runner.v2.ResolveProgramRequest.RetentionR\tretention\"D\n" +
	"\x04Mode\x12\x14\n" +
	"\x10MODE_UNSPECIFIED\x10\x00\x12\x13\n" +
	"\x0fMODE_PROMPT_ALL\x10\x01\x12\x11\n" +
	"\rMODE_SKIP_ALL\x10\x02\"W\n" +
	"\tRetention\x12\x19\n" +
	"\x15RETENTION_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13RETENTION_FIRST_RUN\x10\x01\x12\x16\n" +
	"\x12RETENTION_LAST_RUN\x10\x02B\b\n" +
	"\x06sourceB\n" +
	"\n" +
	"\b_project\"\x9e\x04\n" +
	"\x16ResolveProgramResponse\x12\x16\n" +
	"\x06script\x18\x01 \x01(\tR\x06script\x12F\n" +
	"\bcommands\x18\x02 \x01(\v2*.runme.runner.v2.ResolveProgramCommandListR\bcommands\x12E\n" +
	"\x04vars\x18\x03 \x03(\v21.runme.runner.v2.ResolveProgramResponse.VarResultR\x04vars\x1a\xb5\x01\n" +
	"\tVarResult\x12F\n" +
	"\x06status\x18\x01 \x01(\x0e2..runme.runner.v2.ResolveProgramResponse.StatusR\x06status\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12%\n" +
	"\x0eoriginal_value\x18\x03 \x01(\tR\roriginalValue\x12%\n" +
	"\x0eresolved_value\x18\x04 \x01(\tR\rresolvedValue\"\xa4\x01\n" +
	"\x06Status\x12\x16\n" +
	"\x12STATUS_UNSPECIFIED\x10\x00\x12\x13\n" +
	"\x0fSTATUS_RESOLVED\x10\x01\x12\"\n" +
	"\x1eSTATUS_UNRESOLVED_WITH_MESSAGE\x10\x02\x12&\n" +
	"\"STATUS_UNRESOLVED_WITH_PLACEHOLDER\x10\x03\x12!\n" +
	"\x1dSTATUS_UNRESOLVED_WITH_SECRET\x10\x04\"L\n" +
	"\x16MonitorEnvStoreRequest\x122\n" +
	"\asession\x18\x01 \x01(\v2\x18.runme.runner.v2.SessionR\asession\"\xca\x05\n" +
	"\x1fMonitorEnvStoreResponseSnapshot\x12P\n" +
	"\x04envs\x18\x01 \x03(\v2<.runme.runner.v2.MonitorEnvStoreResponseSnapshot.SnapshotEnvR\x04envs\x1a\xc1\x03\n" +
	"\vSnapshotEnv\x12O\n" +
	"\x06status\x18\x01 \x01(\x0e27.runme.runner.v2.MonitorEnvStoreResponseSnapshot.StatusR\x06status\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x12\n" +
	"\x04spec\x18\x04 \x01(\tR\x04spec\x12\x1f\n" +
	"\vis_required\x18\x05 \x01(\bR\n" +
	"isRequired\x12\x16\n" +
	"\x06origin\x18\x06 \x01(\tR\x06origin\x12%\n" +
	"\x0eoriginal_value\x18\a \x01(\tR\roriginalValue\x12%\n" +
	"\x0eresolved_value\x18\b \x01(\tR\rresolvedValue\x12\x1f\n" +
	"\vcreate_time\x18\t \x01(\tR\n" +
	"createTime\x12\x1f\n" +
	"\vupdate_time\x18\n" +
	" \x01(\tR\n" +
	"updateTime\x12N\n" +
	"\x06errors\x18\v \x03(\v26.runme.runner.v2.MonitorEnvStoreResponseSnapshot.ErrorR\x06errors\x1a5\n" +
	"\x05Error\x12\x12\n" +
	"\x04code\x18\x01 \x01(\rR\x04code\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"Z\n" +
	"\x06Status\x12\x16\n" +
	"\x12STATUS_UNSPECIFIED\x10\x00\x12\x12\n" +
	"\x0eSTATUS_LITERAL\x10\x01\x12\x11\n" +
	"\rSTATUS_HIDDEN\x10\x02\x12\x11\n" +
	"\rSTATUS_MASKED\x10\x03\"\xab\x01\n" +
	"\x17MonitorEnvStoreResponse\x128\n" +
	"\x04type\x18\x01 \x01(\x0e2$.runme.runner.v2.MonitorEnvStoreTypeR\x04type\x12N\n" +
	"\bsnapshot\x18\x02 \x01(\v20.runme.runner.v2.MonitorEnvStoreResponseSnapshotH\x00R\bsnapshotB\x06\n" +
	"\x04data*]\n" +
	"\x13SessionEnvStoreType\x12&\n" +
	"\"SESSION_ENV_STORE_TYPE_UNSPECIFIED\x10\x00\x12\x1e\n" +
	"\x1aSESSION_ENV_STORE_TYPE_OWL\x10\x01*^\n" +
	"\vExecuteStop\x12\x1c\n" +
	"\x18EXECUTE_STOP_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16EXECUTE_STOP_INTERRUPT\x10\x01\x12\x15\n" +
	"\x11EXECUTE_STOP_KILL\x10\x02*U\n" +
	"\x0fSessionStrategy\x12 \n" +
	"\x1cSESSION_STRATEGY_UNSPECIFIED\x10\x00\x12 \n" +
	"\x1cSESSION_STRATEGY_MOST_RECENT\x10\x01*b\n" +
	"\x13MonitorEnvStoreType\x12&\n" +
	"\"MONITOR_ENV_STORE_TYPE_UNSPECIFIED\x10\x00\x12#\n" +
	"\x1fMONITOR_ENV_STORE_TYPE_SNAPSHOT\x10\x012\x90\x06\n" +
	"\rRunnerService\x12`\n" +
	"\rCreateSession\x12%.runme.runner.v2.CreateSessionRequest\x1a&.runme.runner.v2.CreateSessionResponse\"\x00\x12W\n" +
	"\n" +
	"GetSession\x12\".runme.runner.v2.GetSessionRequest\x1a#.runme.runner.v2.GetSessionResponse\"\x00\x12]\n" +
	"\fListSessions\x12$.runme.runner.v2.ListSessionsRequest\x1a%.runme.runner.v2.ListSessionsResponse\"\x00\x12`\n" +
	"\rUpdateSession\x12%.runme.runner.v2.UpdateSessionRequest\x1a&.runme.runner.v2.UpdateSessionResponse\"\x00\x12`\n" +
	"\rDeleteSession\x12%.runme.runner.v2.DeleteSessionRequest\x1a&.runme.runner.v2.DeleteSessionResponse\"\x00\x12h\n" +
	"\x0fMonitorEnvStore\x12'.runme.runner.v2.MonitorEnvStoreRequest\x1a(.runme.runner.v2.MonitorEnvStoreResponse\"\x000\x01\x12R\n" +
	"\aExecute\x12\x1f.runme.runner.v2.ExecuteRequest\x1a .runme.runner.v2.ExecuteResponse\"\x00(\x010\x01\x12c\n" +
	"\x0eResolveProgram\x12&.runme.runner.v2.ResolveProgramRequest\x1a'.runme.runner.v2.ResolveProgramResponse\"\x00BLZJgithub.com/runmedev/runme/v3/pkg/api/gen/proto/go/runme/runner/v2;runnerv2b\x06proto3"

var (
	file_runme_runner_v2_runner_proto_rawDescOnce sync.Once
	file_runme_runner_v2_runner_proto_rawDescData []byte
)

func file_runme_runner_v2_runner_proto_rawDescGZIP() []byte {
	file_runme_runner_v2_runner_proto_rawDescOnce.Do(func() {
		file_runme_runner_v2_runner_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_runme_runner_v2_runner_proto_rawDesc), len(file_runme_runner_v2_runner_proto_rawDesc)))
	})
	return file_runme_runner_v2_runner_proto_rawDescData
}

var file_runme_runner_v2_runner_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_runme_runner_v2_runner_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_runme_runner_v2_runner_proto_goTypes = []any{
	(SessionEnvStoreType)(0), // 0: runme.runner.v2.SessionEnvStoreType
	(ExecuteStop)(0),         // 1: runme.runner.v2.ExecuteStop
	(SessionStrategy)(0),     // 2: runme.runner.v2.SessionStrategy
	(MonitorEnvStoreType)(0), // 3: runme.runner.v2.MonitorEnvStoreType
	(CreateSessionRequest_Config_SessionEnvStoreSeeding)(0), // 4: runme.runner.v2.CreateSessionRequest.Config.SessionEnvStoreSeeding
	(ResolveProgramRequest_Mode)(0),                         // 5: runme.runner.v2.ResolveProgramRequest.Mode
	(ResolveProgramRequest_Retention)(0),                    // 6: runme.runner.v2.ResolveProgramRequest.Retention
	(ResolveProgramResponse_Status)(0),                      // 7: runme.runner.v2.ResolveProgramResponse.Status
	(MonitorEnvStoreResponseSnapshot_Status)(0),             // 8: runme.runner.v2.MonitorEnvStoreResponseSnapshot.Status
	(*Project)(nil),                                     // 9: runme.runner.v2.Project
	(*Session)(nil),                                     // 10: runme.runner.v2.Session
	(*CreateSessionRequest)(nil),                        // 11: runme.runner.v2.CreateSessionRequest
	(*CreateSessionResponse)(nil),                       // 12: runme.runner.v2.CreateSessionResponse
	(*GetSessionRequest)(nil),                           // 13: runme.runner.v2.GetSessionRequest
	(*GetSessionResponse)(nil),                          // 14: runme.runner.v2.GetSessionResponse
	(*ListSessionsRequest)(nil),                         // 15: runme.runner.v2.ListSessionsRequest
	(*ListSessionsResponse)(nil),                        // 16: runme.runner.v2.ListSessionsResponse
	(*UpdateSessionRequest)(nil),                        // 17: runme.runner.v2.UpdateSessionRequest
	(*UpdateSessionResponse)(nil),                       // 18: runme.runner.v2.UpdateSessionResponse
	(*DeleteSessionRequest)(nil),                        // 19: runme.runner.v2.DeleteSessionRequest
	(*DeleteSessionResponse)(nil),                       // 20: runme.runner.v2.DeleteSessionResponse
	(*Winsize)(nil),                                     // 21: runme.runner.v2.Winsize
	(*ExecuteRequest)(nil),                              // 22: runme.runner.v2.ExecuteRequest
	(*ExecuteResponse)(nil),                             // 23: runme.runner.v2.ExecuteResponse
	(*ResolveProgramCommandList)(nil),                   // 24: runme.runner.v2.ResolveProgramCommandList
	(*ResolveProgramRequest)(nil),                       // 25: runme.runner.v2.ResolveProgramRequest
	(*ResolveProgramResponse)(nil),                      // 26: runme.runner.v2.ResolveProgramResponse
	(*MonitorEnvStoreRequest)(nil),                      // 27: runme.runner.v2.MonitorEnvStoreRequest
	(*MonitorEnvStoreResponseSnapshot)(nil),             // 28: runme.runner.v2.MonitorEnvStoreResponseSnapshot
	(*MonitorEnvStoreResponse)(nil),                     // 29: runme.runner.v2.MonitorEnvStoreResponse
	nil,                                                 // 30: runme.runner.v2.Session.MetadataEntry
	nil,                                                 // 31: runme.runner.v2.CreateSessionRequest.MetadataEntry
	(*CreateSessionRequest_Config)(nil),                 // 32: runme.runner.v2.CreateSessionRequest.Config
	nil,                                                 // 33: runme.runner.v2.UpdateSessionRequest.MetadataEntry
	(*ResolveProgramResponse_VarResult)(nil),            // 34: runme.runner.v2.ResolveProgramResponse.VarResult
	(*MonitorEnvStoreResponseSnapshot_SnapshotEnv)(nil), // 35: runme.runner.v2.MonitorEnvStoreResponseSnapshot.SnapshotEnv
	(*MonitorEnvStoreResponseSnapshot_Error)(nil),       // 36: runme.runner.v2.MonitorEnvStoreResponseSnapshot.Error
	(*ProgramConfig)(nil),                               // 37: runme.runner.v2.ProgramConfig
	(*wrapperspb.UInt32Value)(nil),                      // 38: google.protobuf.UInt32Value
}
var file_runme_runner_v2_runner_proto_depIdxs = []int32{
	30, // 0: runme.runner.v2.Session.metadata:type_name -> runme.runner.v2.Session.MetadataEntry
	31, // 1: runme.runner.v2.CreateSessionRequest.metadata:type_name -> runme.runner.v2.CreateSessionRequest.MetadataEntry
	9,  // 2: runme.runner.v2.CreateSessionRequest.project:type_name -> runme.runner.v2.Project
	0,  // 3: runme.runner.v2.CreateSessionRequest.env_store_type:type_name -> runme.runner.v2.SessionEnvStoreType
	32, // 4: runme.runner.v2.CreateSessionRequest.config:type_name -> runme.runner.v2.CreateSessionRequest.Config
	10, // 5: runme.runner.v2.CreateSessionResponse.session:type_name -> runme.runner.v2.Session
	10, // 6: runme.runner.v2.GetSessionResponse.session:type_name -> runme.runner.v2.Session
	10, // 7: runme.runner.v2.ListSessionsResponse.sessions:type_name -> runme.runner.v2.Session
	33, // 8: runme.runner.v2.UpdateSessionRequest.metadata:type_name -> runme.runner.v2.UpdateSessionRequest.MetadataEntry
	9,  // 9: runme.runner.v2.UpdateSessionRequest.project:type_name -> runme.runner.v2.Project
	10, // 10: runme.runner.v2.UpdateSessionResponse.session:type_name -> runme.runner.v2.Session
	37, // 11: runme.runner.v2.ExecuteRequest.config:type_name -> runme.runner.v2.ProgramConfig
	1,  // 12: runme.runner.v2.ExecuteRequest.stop:type_name -> runme.runner.v2.ExecuteStop
	21, // 13: runme.runner.v2.ExecuteRequest.winsize:type_name -> runme.runner.v2.Winsize
	2,  // 14: runme.runner.v2.ExecuteRequest.session_strategy:type_name -> runme.runner.v2.SessionStrategy
	9,  // 15: runme.runner.v2.ExecuteRequest.project:type_name -> runme.runner.v2.Project
	38, // 16: runme.runner.v2.ExecuteResponse.exit_code:type_name -> google.protobuf.UInt32Value
	38, // 17: runme.runner.v2.ExecuteResponse.pid:type_name -> google.protobuf.UInt32Value
	24, // 18: runme.runner.v2.ResolveProgramRequest.commands:type_name -> runme.runner.v2.ResolveProgramCommandList
	5,  // 19: runme.runner.v2.ResolveProgramRequest.mode:type_name -> runme.runner.v2.ResolveProgramRequest.Mode
	2,  // 20: runme.runner.v2.ResolveProgramRequest.session_strategy:type_name -> runme.runner.v2.SessionStrategy
	9,  // 21: runme.runner.v2.ResolveProgramRequest.project:type_name -> runme.runner.v2.Project
	6,  // 22: runme.runner.v2.ResolveProgramRequest.retention:type_name -> runme.runner.v2.ResolveProgramRequest.Retention
	24, // 23: runme.runner.v2.ResolveProgramResponse.commands:type_name -> runme.runner.v2.ResolveProgramCommandList
	34, // 24: runme.runner.v2.ResolveProgramResponse.vars:type_name -> runme.runner.v2.ResolveProgramResponse.VarResult
	10, // 25: runme.runner.v2.MonitorEnvStoreRequest.session:type_name -> runme.runner.v2.Session
	35, // 26: runme.runner.v2.MonitorEnvStoreResponseSnapshot.envs:type_name -> runme.runner.v2.MonitorEnvStoreResponseSnapshot.SnapshotEnv
	3,  // 27: runme.runner.v2.MonitorEnvStoreResponse.type:type_name -> runme.runner.v2.MonitorEnvStoreType
	28, // 28: runme.runner.v2.MonitorEnvStoreResponse.snapshot:type_name -> runme.runner.v2.MonitorEnvStoreResponseSnapshot
	0,  // 29: runme.runner.v2.CreateSessionRequest.Config.env_store_type:type_name -> runme.runner.v2.SessionEnvStoreType
	4,  // 30: runme.runner.v2.CreateSessionRequest.Config.env_store_seeding:type_name -> runme.runner.v2.CreateSessionRequest.Config.SessionEnvStoreSeeding
	7,  // 31: runme.runner.v2.ResolveProgramResponse.VarResult.status:type_name -> runme.runner.v2.ResolveProgramResponse.Status
	8,  // 32: runme.runner.v2.MonitorEnvStoreResponseSnapshot.SnapshotEnv.status:type_name -> runme.runner.v2.MonitorEnvStoreResponseSnapshot.Status
	36, // 33: runme.runner.v2.MonitorEnvStoreResponseSnapshot.SnapshotEnv.errors:type_name -> runme.runner.v2.MonitorEnvStoreResponseSnapshot.Error
	11, // 34: runme.runner.v2.RunnerService.CreateSession:input_type -> runme.runner.v2.CreateSessionRequest
	13, // 35: runme.runner.v2.RunnerService.GetSession:input_type -> runme.runner.v2.GetSessionRequest
	15, // 36: runme.runner.v2.RunnerService.ListSessions:input_type -> runme.runner.v2.ListSessionsRequest
	17, // 37: runme.runner.v2.RunnerService.UpdateSession:input_type -> runme.runner.v2.UpdateSessionRequest
	19, // 38: runme.runner.v2.RunnerService.DeleteSession:input_type -> runme.runner.v2.DeleteSessionRequest
	27, // 39: runme.runner.v2.RunnerService.MonitorEnvStore:input_type -> runme.runner.v2.MonitorEnvStoreRequest
	22, // 40: runme.runner.v2.RunnerService.Execute:input_type -> runme.runner.v2.ExecuteRequest
	25, // 41: runme.runner.v2.RunnerService.ResolveProgram:input_type -> runme.runner.v2.ResolveProgramRequest
	12, // 42: runme.runner.v2.RunnerService.CreateSession:output_type -> runme.runner.v2.CreateSessionResponse
	14, // 43: runme.runner.v2.RunnerService.GetSession:output_type -> runme.runner.v2.GetSessionResponse
	16, // 44: runme.runner.v2.RunnerService.ListSessions:output_type -> runme.runner.v2.ListSessionsResponse
	18, // 45: runme.runner.v2.RunnerService.UpdateSession:output_type -> runme.runner.v2.UpdateSessionResponse
	20, // 46: runme.runner.v2.RunnerService.DeleteSession:output_type -> runme.runner.v2.DeleteSessionResponse
	29, // 47: runme.runner.v2.RunnerService.MonitorEnvStore:output_type -> runme.runner.v2.MonitorEnvStoreResponse
	23, // 48: runme.runner.v2.RunnerService.Execute:output_type -> runme.runner.v2.ExecuteResponse
	26, // 49: runme.runner.v2.RunnerService.ResolveProgram:output_type -> runme.runner.v2.ResolveProgramResponse
	42, // [42:50] is the sub-list for method output_type
	34, // [34:42] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_runme_runner_v2_runner_proto_init() }
func file_runme_runner_v2_runner_proto_init() {
	if File_runme_runner_v2_runner_proto != nil {
		return
	}
	file_runme_runner_v2_config_proto_init()
	file_runme_runner_v2_runner_proto_msgTypes[2].OneofWrappers = []any{}
	file_runme_runner_v2_runner_proto_msgTypes[8].OneofWrappers = []any{}
	file_runme_runner_v2_runner_proto_msgTypes[13].OneofWrappers = []any{}
	file_runme_runner_v2_runner_proto_msgTypes[16].OneofWrappers = []any{
		(*ResolveProgramRequest_Commands)(nil),
		(*ResolveProgramRequest_Script)(nil),
	}
	file_runme_runner_v2_runner_proto_msgTypes[20].OneofWrappers = []any{
		(*MonitorEnvStoreResponse_Snapshot)(nil),
	}
	file_runme_runner_v2_runner_proto_msgTypes[23].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_runme_runner_v2_runner_proto_rawDesc), len(file_runme_runner_v2_runner_proto_rawDesc)),
			NumEnums:      9,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_runme_runner_v2_runner_proto_goTypes,
		DependencyIndexes: file_runme_runner_v2_runner_proto_depIdxs,
		EnumInfos:         file_runme_runner_v2_runner_proto_enumTypes,
		MessageInfos:      file_runme_runner_v2_runner_proto_msgTypes,
	}.Build()
	File_runme_runner_v2_runner_proto = out.File
	file_runme_runner_v2_runner_proto_goTypes = nil
	file_runme_runner_v2_runner_proto_depIdxs = nil
}
